// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Form with cancel link should render component 1`] = `
.c1 {
  margin-top: 24px;
}

.c0 {
  padding: 24px;
}

<MemoryRouter>
  <Router
    history={
      Object {
        "listen": [MockFunction] {
          "calls": Array [
            Array [
              [Function],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "location": Object {
          "pathname": "",
        },
      }
    }
  >
    <Form
      cancelLink="/back"
      initialValues={
        Object {
          "name": "Test",
        }
      }
      onSubmit={[MockFunction]}
      validationSchema={
        ObjectSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_defaultDefault": [Function],
          "_deps": Array [],
          "_excludedEdges": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_nodes": Array [
            "name",
          ],
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "object",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "fields": Object {
            "name": StringSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "required": true,
              },
              "_mutate": undefined,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "tests": Array [
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        }
      }
    >
      <Styled(WithStyles(Paper))>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "Naked": [Function],
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bwzfXH",
                "isStatic": true,
                "lastClassName": "c0",
                "rules": Array [
                  "
  padding: 24px;
",
                ],
              },
              "displayName": "Styled(WithStyles(Paper))",
              "foldedComponentIds": Array [],
              "options": Object {
                "defaultTheme": Object {
                  "breakpoints": Object {
                    "between": [Function],
                    "down": [Function],
                    "keys": Array [
                      "xs",
                      "sm",
                      "md",
                      "lg",
                      "xl",
                    ],
                    "only": [Function],
                    "up": [Function],
                    "values": Object {
                      "lg": 1280,
                      "md": 960,
                      "sm": 600,
                      "xl": 1920,
                      "xs": 0,
                    },
                    "width": [Function],
                  },
                  "direction": "ltr",
                  "mixins": Object {
                    "gutters": [Function],
                    "toolbar": Object {
                      "@media (min-width:0px) and (orientation: landscape)": Object {
                        "minHeight": 48,
                      },
                      "@media (min-width:600px)": Object {
                        "minHeight": 64,
                      },
                      "minHeight": 56,
                    },
                  },
                  "overrides": Object {},
                  "palette": Object {
                    "action": Object {
                      "active": "rgba(0, 0, 0, 0.54)",
                      "disabled": "rgba(0, 0, 0, 0.26)",
                      "disabledBackground": "rgba(0, 0, 0, 0.12)",
                      "hover": "rgba(0, 0, 0, 0.08)",
                      "hoverOpacity": 0.08,
                      "selected": "rgba(0, 0, 0, 0.14)",
                    },
                    "augmentColor": [Function],
                    "background": Object {
                      "default": "#fafafa",
                      "paper": "#fff",
                    },
                    "common": Object {
                      "black": "#000",
                      "white": "#fff",
                    },
                    "contrastThreshold": 3,
                    "divider": "rgba(0, 0, 0, 0.12)",
                    "error": Object {
                      "contrastText": "#fff",
                      "dark": "#d32f2f",
                      "light": "#e57373",
                      "main": "#f44336",
                    },
                    "getContrastText": [Function],
                    "grey": Object {
                      "100": "#f5f5f5",
                      "200": "#eeeeee",
                      "300": "#e0e0e0",
                      "400": "#bdbdbd",
                      "50": "#fafafa",
                      "500": "#9e9e9e",
                      "600": "#757575",
                      "700": "#616161",
                      "800": "#424242",
                      "900": "#212121",
                      "A100": "#d5d5d5",
                      "A200": "#aaaaaa",
                      "A400": "#303030",
                      "A700": "#616161",
                    },
                    "primary": Object {
                      "contrastText": "#fff",
                      "dark": "#303f9f",
                      "light": "#7986cb",
                      "main": "#3f51b5",
                    },
                    "secondary": Object {
                      "contrastText": "#fff",
                      "dark": "#c51162",
                      "light": "#ff4081",
                      "main": "#f50057",
                    },
                    "text": Object {
                      "disabled": "rgba(0, 0, 0, 0.38)",
                      "hint": "rgba(0, 0, 0, 0.38)",
                      "primary": "rgba(0, 0, 0, 0.87)",
                      "secondary": "rgba(0, 0, 0, 0.54)",
                    },
                    "tonalOffset": 0.2,
                    "type": "light",
                  },
                  "props": Object {},
                  "shadows": Array [
                    "none",
                    "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                    "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                    "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                    "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                    "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                    "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                    "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                    "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                    "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                    "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                    "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                    "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                    "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                    "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                    "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                    "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                    "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                    "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                    "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                    "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                    "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                    "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                    "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                    "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                  ],
                  "shape": Object {
                    "borderRadius": 4,
                  },
                  "spacing": Object {
                    "unit": 8,
                  },
                  "transitions": Object {
                    "create": [Function],
                    "duration": Object {
                      "complex": 375,
                      "enteringScreen": 225,
                      "leavingScreen": 195,
                      "short": 250,
                      "shorter": 200,
                      "shortest": 150,
                      "standard": 300,
                    },
                    "easing": Object {
                      "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                      "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                      "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                      "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                    },
                    "getAutoHeightDuration": [Function],
                  },
                  "typography": Object {
                    "body1": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 400,
                      "lineHeight": "1.46429em",
                    },
                    "body1Next": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.00938em",
                      "lineHeight": 1.5,
                    },
                    "body2": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 500,
                      "lineHeight": "1.71429em",
                    },
                    "body2Next": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.01071em",
                      "lineHeight": 1.5,
                    },
                    "button": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 500,
                      "textTransform": "uppercase",
                    },
                    "buttonNext": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 500,
                      "letterSpacing": "0.02857em",
                      "lineHeight": 1.75,
                      "textTransform": "uppercase",
                    },
                    "caption": Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.75rem",
                      "fontWeight": 400,
                      "lineHeight": "1.375em",
                    },
                    "captionNext": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.75rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.03333em",
                      "lineHeight": 1.66,
                    },
                    "display1": Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "2.125rem",
                      "fontWeight": 400,
                      "lineHeight": "1.20588em",
                    },
                    "display2": Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "2.8125rem",
                      "fontWeight": 400,
                      "lineHeight": "1.13333em",
                      "marginLeft": "-.02em",
                    },
                    "display3": Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "3.5rem",
                      "fontWeight": 400,
                      "letterSpacing": "-.02em",
                      "lineHeight": "1.30357em",
                      "marginLeft": "-.02em",
                    },
                    "display4": Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "7rem",
                      "fontWeight": 300,
                      "letterSpacing": "-.04em",
                      "lineHeight": "1.14286em",
                      "marginLeft": "-.04em",
                    },
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": 14,
                    "fontWeightLight": 300,
                    "fontWeightMedium": 500,
                    "fontWeightRegular": 400,
                    "h1": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "6rem",
                      "fontWeight": 300,
                      "letterSpacing": "-0.01562em",
                      "lineHeight": 1,
                    },
                    "h2": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "3.75rem",
                      "fontWeight": 300,
                      "letterSpacing": "-0.00833em",
                      "lineHeight": 1,
                    },
                    "h3": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "3rem",
                      "fontWeight": 400,
                      "letterSpacing": "0em",
                      "lineHeight": 1.04,
                    },
                    "h4": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "2.125rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.00735em",
                      "lineHeight": 1.17,
                    },
                    "h5": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1.5rem",
                      "fontWeight": 400,
                      "letterSpacing": "0em",
                      "lineHeight": 1.33,
                    },
                    "h6": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1.25rem",
                      "fontWeight": 500,
                      "letterSpacing": "0.0075em",
                      "lineHeight": 1.6,
                    },
                    "headline": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1.5rem",
                      "fontWeight": 400,
                      "lineHeight": "1.35417em",
                    },
                    "overline": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.75rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.08333em",
                      "lineHeight": 2.66,
                      "textTransform": "uppercase",
                    },
                    "pxToRem": [Function],
                    "round": [Function],
                    "subheading": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1rem",
                      "fontWeight": 400,
                      "lineHeight": "1.5em",
                    },
                    "subtitle1": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1rem",
                      "fontWeight": 400,
                      "letterSpacing": "0.00938em",
                      "lineHeight": 1.75,
                    },
                    "subtitle2": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 500,
                      "letterSpacing": "0.00714em",
                      "lineHeight": 1.57,
                    },
                    "title": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1.3125rem",
                      "fontWeight": 500,
                      "lineHeight": "1.16667em",
                    },
                    "useNextVariants": false,
                  },
                  "zIndex": Object {
                    "appBar": 1100,
                    "drawer": 1200,
                    "mobileStepper": 1000,
                    "modal": 1300,
                    "snackbar": 1400,
                    "tooltip": 1500,
                  },
                },
                "name": "MuiPaper",
              },
              "render": [Function],
              "styledComponentId": "sc-bwzfXH",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <WithStyles(Paper)
            className="c0"
          >
            <Paper
              className="c0"
              classes={
                Object {
                  "elevation0": "MuiPaper-elevation0-3",
                  "elevation1": "MuiPaper-elevation1-4",
                  "elevation10": "MuiPaper-elevation10-13",
                  "elevation11": "MuiPaper-elevation11-14",
                  "elevation12": "MuiPaper-elevation12-15",
                  "elevation13": "MuiPaper-elevation13-16",
                  "elevation14": "MuiPaper-elevation14-17",
                  "elevation15": "MuiPaper-elevation15-18",
                  "elevation16": "MuiPaper-elevation16-19",
                  "elevation17": "MuiPaper-elevation17-20",
                  "elevation18": "MuiPaper-elevation18-21",
                  "elevation19": "MuiPaper-elevation19-22",
                  "elevation2": "MuiPaper-elevation2-5",
                  "elevation20": "MuiPaper-elevation20-23",
                  "elevation21": "MuiPaper-elevation21-24",
                  "elevation22": "MuiPaper-elevation22-25",
                  "elevation23": "MuiPaper-elevation23-26",
                  "elevation24": "MuiPaper-elevation24-27",
                  "elevation3": "MuiPaper-elevation3-6",
                  "elevation4": "MuiPaper-elevation4-7",
                  "elevation5": "MuiPaper-elevation5-8",
                  "elevation6": "MuiPaper-elevation6-9",
                  "elevation7": "MuiPaper-elevation7-10",
                  "elevation8": "MuiPaper-elevation8-11",
                  "elevation9": "MuiPaper-elevation9-12",
                  "root": "MuiPaper-root-1",
                  "rounded": "MuiPaper-rounded-2",
                }
              }
              component="div"
              elevation={2}
              square={false}
            >
              <div
                className="MuiPaper-root-1 MuiPaper-elevation2-5 MuiPaper-rounded-2 c0"
              >
                <Formik
                  enableReinitialize={false}
                  initialValues={
                    Object {
                      "name": "Test",
                    }
                  }
                  isInitialValid={false}
                  onSubmit={[MockFunction]}
                  validateOnBlur={true}
                  validateOnChange={true}
                  validationSchema={
                    ObjectSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_defaultDefault": [Function],
                      "_deps": Array [],
                      "_excludedEdges": Array [],
                      "_exclusive": Object {},
                      "_mutate": undefined,
                      "_nodes": Array [
                        "name",
                      ],
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "object",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "fields": Object {
                        "name": StringSchema {
                          "_blacklist": RefSet {
                            "list": Set {},
                            "refs": Map {},
                          },
                          "_conditions": Array [],
                          "_deps": Array [],
                          "_exclusive": Object {
                            "required": true,
                          },
                          "_mutate": undefined,
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "string",
                          "_typeError": [Function],
                          "_whitelist": RefSet {
                            "list": Set {},
                            "refs": Map {},
                          },
                          "tests": Array [
                            [Function],
                          ],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                      },
                      "tests": Array [],
                      "transforms": Array [
                        [Function],
                      ],
                    }
                  }
                >
                  <Form
                    autoComplete="off"
                  >
                    <Component
                      autoComplete="off"
                      formik={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "name": "Test",
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validate": undefined,
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "validationSchema": ObjectSchema {
                            "_blacklist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "_conditions": Array [],
                            "_defaultDefault": [Function],
                            "_deps": Array [],
                            "_excludedEdges": Array [],
                            "_exclusive": Object {},
                            "_mutate": undefined,
                            "_nodes": Array [
                              "name",
                            ],
                            "_options": Object {
                              "abortEarly": true,
                              "recursive": true,
                            },
                            "_type": "object",
                            "_typeError": [Function],
                            "_whitelist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "fields": Object {
                              "name": StringSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_deps": Array [],
                                "_exclusive": Object {
                                  "required": true,
                                },
                                "_mutate": undefined,
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "string",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "tests": Array [
                                  [Function],
                                ],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                            },
                            "tests": Array [],
                            "transforms": Array [
                              [Function],
                            ],
                          },
                          "values": Object {
                            "name": "Test",
                          },
                        }
                      }
                    >
                      <form
                        autoComplete="off"
                        onReset={[Function]}
                        onSubmit={[Function]}
                      >
                        <FormikTextField
                          fullWidth={true}
                          label="Name"
                          margin="normal"
                          name="name"
                        >
                          <FormikConnect(FieldInner)
                            component={[Function]}
                            fullWidth={true}
                            label="Name"
                            margin="normal"
                            name="name"
                          >
                            <FieldInner
                              component={[Function]}
                              formik={
                                Object {
                                  "dirty": false,
                                  "errors": Object {},
                                  "handleBlur": [Function],
                                  "handleChange": [Function],
                                  "handleReset": [Function],
                                  "handleSubmit": [Function],
                                  "initialValues": Object {
                                    "name": "Test",
                                  },
                                  "isSubmitting": false,
                                  "isValid": false,
                                  "isValidating": false,
                                  "registerField": [Function],
                                  "resetForm": [Function],
                                  "setError": [Function],
                                  "setErrors": [Function],
                                  "setFieldError": [Function],
                                  "setFieldTouched": [Function],
                                  "setFieldValue": [Function],
                                  "setFormikState": [Function],
                                  "setStatus": [Function],
                                  "setSubmitting": [Function],
                                  "setTouched": [Function],
                                  "setValues": [Function],
                                  "status": undefined,
                                  "submitCount": 0,
                                  "submitForm": [Function],
                                  "touched": Object {},
                                  "unregisterField": [Function],
                                  "validate": undefined,
                                  "validateField": [Function],
                                  "validateForm": [Function],
                                  "validateOnBlur": true,
                                  "validateOnChange": true,
                                  "validationSchema": ObjectSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_defaultDefault": [Function],
                                    "_deps": Array [],
                                    "_excludedEdges": Array [],
                                    "_exclusive": Object {},
                                    "_mutate": undefined,
                                    "_nodes": Array [
                                      "name",
                                    ],
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "object",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "fields": Object {
                                      "name": StringSchema {
                                        "_blacklist": RefSet {
                                          "list": Set {},
                                          "refs": Map {},
                                        },
                                        "_conditions": Array [],
                                        "_deps": Array [],
                                        "_exclusive": Object {
                                          "required": true,
                                        },
                                        "_mutate": undefined,
                                        "_options": Object {
                                          "abortEarly": true,
                                          "recursive": true,
                                        },
                                        "_type": "string",
                                        "_typeError": [Function],
                                        "_whitelist": RefSet {
                                          "list": Set {},
                                          "refs": Map {},
                                        },
                                        "tests": Array [
                                          [Function],
                                        ],
                                        "transforms": Array [
                                          [Function],
                                        ],
                                      },
                                    },
                                    "tests": Array [],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                  "values": Object {
                                    "name": "Test",
                                  },
                                }
                              }
                              fullWidth={true}
                              label="Name"
                              margin="normal"
                              name="name"
                            >
                              <TextField
                                field={
                                  Object {
                                    "name": "name",
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "value": "Test",
                                  }
                                }
                                form={
                                  Object {
                                    "dirty": false,
                                    "errors": Object {},
                                    "handleBlur": [Function],
                                    "handleChange": [Function],
                                    "handleReset": [Function],
                                    "handleSubmit": [Function],
                                    "initialValues": Object {
                                      "name": "Test",
                                    },
                                    "isSubmitting": false,
                                    "isValid": false,
                                    "isValidating": false,
                                    "registerField": [Function],
                                    "resetForm": [Function],
                                    "setError": [Function],
                                    "setErrors": [Function],
                                    "setFieldError": [Function],
                                    "setFieldTouched": [Function],
                                    "setFieldValue": [Function],
                                    "setFormikState": [Function],
                                    "setStatus": [Function],
                                    "setSubmitting": [Function],
                                    "setTouched": [Function],
                                    "setValues": [Function],
                                    "status": undefined,
                                    "submitCount": 0,
                                    "submitForm": [Function],
                                    "touched": Object {},
                                    "unregisterField": [Function],
                                    "validateField": [Function],
                                    "validateForm": [Function],
                                    "validateOnBlur": true,
                                    "validateOnChange": true,
                                    "values": Object {
                                      "name": "Test",
                                    },
                                  }
                                }
                                fullWidth={true}
                                label="Name"
                                margin="normal"
                              >
                                <TextField
                                  error={false}
                                  fullWidth={true}
                                  label="Name"
                                  margin="normal"
                                  name="name"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  required={false}
                                  select={false}
                                  value="Test"
                                  variant="standard"
                                >
                                  <WithStyles(FormControl)
                                    error={false}
                                    fullWidth={true}
                                    margin="normal"
                                    required={false}
                                    variant="standard"
                                  >
                                    <FormControl
                                      classes={
                                        Object {
                                          "fullWidth": "MuiFormControl-fullWidth-31",
                                          "marginDense": "MuiFormControl-marginDense-30",
                                          "marginNormal": "MuiFormControl-marginNormal-29",
                                          "root": "MuiFormControl-root-28",
                                        }
                                      }
                                      component="div"
                                      disabled={false}
                                      error={false}
                                      fullWidth={true}
                                      margin="normal"
                                      required={false}
                                      variant="standard"
                                    >
                                      <div
                                        className="MuiFormControl-root-28 MuiFormControl-marginNormal-29 MuiFormControl-fullWidth-31"
                                      >
                                        <WithStyles(WithFormControlContext(InputLabel))>
                                          <WithFormControlContext(InputLabel)
                                            classes={
                                              Object {
                                                "animated": "MuiInputLabel-animated-40",
                                                "disabled": "MuiInputLabel-disabled-34",
                                                "error": "MuiInputLabel-error-35",
                                                "filled": "MuiInputLabel-filled-41",
                                                "focused": "MuiInputLabel-focused-33",
                                                "formControl": "MuiInputLabel-formControl-37",
                                                "marginDense": "MuiInputLabel-marginDense-38",
                                                "outlined": "MuiInputLabel-outlined-42",
                                                "required": "MuiInputLabel-required-36",
                                                "root": "MuiInputLabel-root-32",
                                                "shrink": "MuiInputLabel-shrink-39",
                                              }
                                            }
                                          >
                                            <InputLabel
                                              classes={
                                                Object {
                                                  "animated": "MuiInputLabel-animated-40",
                                                  "disabled": "MuiInputLabel-disabled-34",
                                                  "error": "MuiInputLabel-error-35",
                                                  "filled": "MuiInputLabel-filled-41",
                                                  "focused": "MuiInputLabel-focused-33",
                                                  "formControl": "MuiInputLabel-formControl-37",
                                                  "marginDense": "MuiInputLabel-marginDense-38",
                                                  "outlined": "MuiInputLabel-outlined-42",
                                                  "required": "MuiInputLabel-required-36",
                                                  "root": "MuiInputLabel-root-32",
                                                  "shrink": "MuiInputLabel-shrink-39",
                                                }
                                              }
                                              disableAnimation={false}
                                              muiFormControl={
                                                Object {
                                                  "adornedStart": false,
                                                  "disabled": false,
                                                  "error": false,
                                                  "filled": true,
                                                  "focused": false,
                                                  "margin": "normal",
                                                  "onBlur": [Function],
                                                  "onEmpty": [Function],
                                                  "onFilled": [Function],
                                                  "onFocus": [Function],
                                                  "required": false,
                                                  "variant": "standard",
                                                }
                                              }
                                            >
                                              <WithStyles(WithFormControlContext(FormLabel))
                                                className="MuiInputLabel-root-32 MuiInputLabel-formControl-37 MuiInputLabel-animated-40 MuiInputLabel-shrink-39"
                                                classes={
                                                  Object {
                                                    "disabled": "MuiInputLabel-disabled-34",
                                                    "error": "MuiInputLabel-error-35",
                                                    "focused": "MuiInputLabel-focused-33",
                                                    "required": "MuiInputLabel-required-36",
                                                  }
                                                }
                                                data-shrink={true}
                                              >
                                                <WithFormControlContext(FormLabel)
                                                  className="MuiInputLabel-root-32 MuiInputLabel-formControl-37 MuiInputLabel-animated-40 MuiInputLabel-shrink-39"
                                                  classes={
                                                    Object {
                                                      "asterisk": "MuiFormLabel-asterisk-49",
                                                      "disabled": "MuiFormLabel-disabled-45 MuiInputLabel-disabled-34",
                                                      "error": "MuiFormLabel-error-46 MuiInputLabel-error-35",
                                                      "filled": "MuiFormLabel-filled-47",
                                                      "focused": "MuiFormLabel-focused-44 MuiInputLabel-focused-33",
                                                      "required": "MuiFormLabel-required-48 MuiInputLabel-required-36",
                                                      "root": "MuiFormLabel-root-43",
                                                    }
                                                  }
                                                  data-shrink={true}
                                                >
                                                  <FormLabel
                                                    className="MuiInputLabel-root-32 MuiInputLabel-formControl-37 MuiInputLabel-animated-40 MuiInputLabel-shrink-39"
                                                    classes={
                                                      Object {
                                                        "asterisk": "MuiFormLabel-asterisk-49",
                                                        "disabled": "MuiFormLabel-disabled-45 MuiInputLabel-disabled-34",
                                                        "error": "MuiFormLabel-error-46 MuiInputLabel-error-35",
                                                        "filled": "MuiFormLabel-filled-47",
                                                        "focused": "MuiFormLabel-focused-44 MuiInputLabel-focused-33",
                                                        "required": "MuiFormLabel-required-48 MuiInputLabel-required-36",
                                                        "root": "MuiFormLabel-root-43",
                                                      }
                                                    }
                                                    component="label"
                                                    data-shrink={true}
                                                    muiFormControl={
                                                      Object {
                                                        "adornedStart": false,
                                                        "disabled": false,
                                                        "error": false,
                                                        "filled": true,
                                                        "focused": false,
                                                        "margin": "normal",
                                                        "onBlur": [Function],
                                                        "onEmpty": [Function],
                                                        "onFilled": [Function],
                                                        "onFocus": [Function],
                                                        "required": false,
                                                        "variant": "standard",
                                                      }
                                                    }
                                                  >
                                                    <label
                                                      className="MuiFormLabel-root-43 MuiFormLabel-filled-47 MuiInputLabel-root-32 MuiInputLabel-formControl-37 MuiInputLabel-animated-40 MuiInputLabel-shrink-39"
                                                      data-shrink={true}
                                                    >
                                                      Name
                                                    </label>
                                                  </FormLabel>
                                                </WithFormControlContext(FormLabel)>
                                              </WithStyles(WithFormControlContext(FormLabel))>
                                            </InputLabel>
                                          </WithFormControlContext(InputLabel)>
                                        </WithStyles(WithFormControlContext(InputLabel))>
                                        <WithStyles(Input)
                                          fullWidth={true}
                                          name="name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          value="Test"
                                        >
                                          <Input
                                            classes={
                                              Object {
                                                "disabled": "MuiInput-disabled-53",
                                                "error": "MuiInput-error-55",
                                                "focused": "MuiInput-focused-52",
                                                "formControl": "MuiInput-formControl-51",
                                                "fullWidth": "MuiInput-fullWidth-57",
                                                "input": "MuiInput-input-58",
                                                "inputMarginDense": "MuiInput-inputMarginDense-59",
                                                "inputMultiline": "MuiInput-inputMultiline-60",
                                                "inputType": "MuiInput-inputType-61",
                                                "inputTypeSearch": "MuiInput-inputTypeSearch-62",
                                                "multiline": "MuiInput-multiline-56",
                                                "root": "MuiInput-root-50",
                                                "underline": "MuiInput-underline-54",
                                              }
                                            }
                                            fullWidth={true}
                                            name="name"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            value="Test"
                                          >
                                            <WithStyles(WithFormControlContext(InputBase))
                                              classes={
                                                Object {
                                                  "disabled": "MuiInput-disabled-53",
                                                  "error": "MuiInput-error-55",
                                                  "focused": "MuiInput-focused-52",
                                                  "formControl": "MuiInput-formControl-51",
                                                  "fullWidth": "MuiInput-fullWidth-57",
                                                  "input": "MuiInput-input-58",
                                                  "inputMarginDense": "MuiInput-inputMarginDense-59",
                                                  "inputMultiline": "MuiInput-inputMultiline-60",
                                                  "inputType": "MuiInput-inputType-61",
                                                  "inputTypeSearch": "MuiInput-inputTypeSearch-62",
                                                  "multiline": "MuiInput-multiline-56",
                                                  "root": "MuiInput-root-50 MuiInput-underline-54",
                                                  "underline": null,
                                                }
                                              }
                                              fullWidth={true}
                                              inputComponent="input"
                                              multiline={false}
                                              name="name"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              type="text"
                                              value="Test"
                                            >
                                              <WithFormControlContext(InputBase)
                                                classes={
                                                  Object {
                                                    "adornedEnd": "MuiInputBase-adornedEnd-68",
                                                    "adornedStart": "MuiInputBase-adornedStart-67",
                                                    "disabled": "MuiInputBase-disabled-66 MuiInput-disabled-53",
                                                    "error": "MuiInputBase-error-69 MuiInput-error-55",
                                                    "focused": "MuiInputBase-focused-65 MuiInput-focused-52",
                                                    "formControl": "MuiInputBase-formControl-64 MuiInput-formControl-51",
                                                    "fullWidth": "MuiInputBase-fullWidth-72 MuiInput-fullWidth-57",
                                                    "input": "MuiInputBase-input-73 MuiInput-input-58",
                                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-79",
                                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart-78",
                                                    "inputMarginDense": "MuiInputBase-inputMarginDense-74 MuiInput-inputMarginDense-59",
                                                    "inputMultiline": "MuiInputBase-inputMultiline-75 MuiInput-inputMultiline-60",
                                                    "inputType": "MuiInputBase-inputType-76 MuiInput-inputType-61",
                                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch-77 MuiInput-inputTypeSearch-62",
                                                    "marginDense": "MuiInputBase-marginDense-70",
                                                    "multiline": "MuiInputBase-multiline-71 MuiInput-multiline-56",
                                                    "root": "MuiInputBase-root-63 MuiInput-root-50 MuiInput-underline-54",
                                                  }
                                                }
                                                fullWidth={true}
                                                inputComponent="input"
                                                multiline={false}
                                                name="name"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                type="text"
                                                value="Test"
                                              >
                                                <InputBase
                                                  classes={
                                                    Object {
                                                      "adornedEnd": "MuiInputBase-adornedEnd-68",
                                                      "adornedStart": "MuiInputBase-adornedStart-67",
                                                      "disabled": "MuiInputBase-disabled-66 MuiInput-disabled-53",
                                                      "error": "MuiInputBase-error-69 MuiInput-error-55",
                                                      "focused": "MuiInputBase-focused-65 MuiInput-focused-52",
                                                      "formControl": "MuiInputBase-formControl-64 MuiInput-formControl-51",
                                                      "fullWidth": "MuiInputBase-fullWidth-72 MuiInput-fullWidth-57",
                                                      "input": "MuiInputBase-input-73 MuiInput-input-58",
                                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-79",
                                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart-78",
                                                      "inputMarginDense": "MuiInputBase-inputMarginDense-74 MuiInput-inputMarginDense-59",
                                                      "inputMultiline": "MuiInputBase-inputMultiline-75 MuiInput-inputMultiline-60",
                                                      "inputType": "MuiInputBase-inputType-76 MuiInput-inputType-61",
                                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch-77 MuiInput-inputTypeSearch-62",
                                                      "marginDense": "MuiInputBase-marginDense-70",
                                                      "multiline": "MuiInputBase-multiline-71 MuiInput-multiline-56",
                                                      "root": "MuiInputBase-root-63 MuiInput-root-50 MuiInput-underline-54",
                                                    }
                                                  }
                                                  fullWidth={true}
                                                  inputComponent="input"
                                                  muiFormControl={
                                                    Object {
                                                      "adornedStart": false,
                                                      "disabled": false,
                                                      "error": false,
                                                      "filled": true,
                                                      "focused": false,
                                                      "margin": "normal",
                                                      "onBlur": [Function],
                                                      "onEmpty": [Function],
                                                      "onFilled": [Function],
                                                      "onFocus": [Function],
                                                      "required": false,
                                                      "variant": "standard",
                                                    }
                                                  }
                                                  multiline={false}
                                                  name="name"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  type="text"
                                                  value="Test"
                                                >
                                                  <div
                                                    className="MuiInputBase-root-63 MuiInput-root-50 MuiInput-underline-54 MuiInputBase-fullWidth-72 MuiInput-fullWidth-57 MuiInputBase-formControl-64 MuiInput-formControl-51"
                                                    onClick={[Function]}
                                                  >
                                                    <input
                                                      aria-invalid={false}
                                                      className="MuiInputBase-input-73 MuiInput-input-58"
                                                      disabled={false}
                                                      name="name"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      required={false}
                                                      type="text"
                                                      value="Test"
                                                    />
                                                  </div>
                                                </InputBase>
                                              </WithFormControlContext(InputBase)>
                                            </WithStyles(WithFormControlContext(InputBase))>
                                          </Input>
                                        </WithStyles(Input)>
                                      </div>
                                    </FormControl>
                                  </WithStyles(FormControl)>
                                </TextField>
                              </TextField>
                            </FieldInner>
                          </FormikConnect(FieldInner)>
                        </FormikTextField>
                        <FormButtonBar>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": true,
                                    "lastClassName": "c1",
                                    "rules": Array [
                                      "
  margin-top: 24px;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="c1"
                              >
                                <WithStyles(Grid)
                                  container={true}
                                  justify="space-between"
                                >
                                  <Grid
                                    alignContent="stretch"
                                    alignItems="stretch"
                                    classes={
                                      Object {
                                        "align-content-xs-center": "MuiGrid-align-content-xs-center-92",
                                        "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-94",
                                        "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-93",
                                        "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-96",
                                        "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-95",
                                        "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-91",
                                        "align-items-xs-center": "MuiGrid-align-items-xs-center-88",
                                        "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-90",
                                        "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-89",
                                        "container": "MuiGrid-container-80",
                                        "direction-xs-column": "MuiGrid-direction-xs-column-83",
                                        "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-84",
                                        "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-85",
                                        "grid-lg-1": "MuiGrid-grid-lg-1-151",
                                        "grid-lg-10": "MuiGrid-grid-lg-10-160",
                                        "grid-lg-11": "MuiGrid-grid-lg-11-161",
                                        "grid-lg-12": "MuiGrid-grid-lg-12-162",
                                        "grid-lg-2": "MuiGrid-grid-lg-2-152",
                                        "grid-lg-3": "MuiGrid-grid-lg-3-153",
                                        "grid-lg-4": "MuiGrid-grid-lg-4-154",
                                        "grid-lg-5": "MuiGrid-grid-lg-5-155",
                                        "grid-lg-6": "MuiGrid-grid-lg-6-156",
                                        "grid-lg-7": "MuiGrid-grid-lg-7-157",
                                        "grid-lg-8": "MuiGrid-grid-lg-8-158",
                                        "grid-lg-9": "MuiGrid-grid-lg-9-159",
                                        "grid-lg-auto": "MuiGrid-grid-lg-auto-149",
                                        "grid-lg-true": "MuiGrid-grid-lg-true-150",
                                        "grid-md-1": "MuiGrid-grid-md-1-137",
                                        "grid-md-10": "MuiGrid-grid-md-10-146",
                                        "grid-md-11": "MuiGrid-grid-md-11-147",
                                        "grid-md-12": "MuiGrid-grid-md-12-148",
                                        "grid-md-2": "MuiGrid-grid-md-2-138",
                                        "grid-md-3": "MuiGrid-grid-md-3-139",
                                        "grid-md-4": "MuiGrid-grid-md-4-140",
                                        "grid-md-5": "MuiGrid-grid-md-5-141",
                                        "grid-md-6": "MuiGrid-grid-md-6-142",
                                        "grid-md-7": "MuiGrid-grid-md-7-143",
                                        "grid-md-8": "MuiGrid-grid-md-8-144",
                                        "grid-md-9": "MuiGrid-grid-md-9-145",
                                        "grid-md-auto": "MuiGrid-grid-md-auto-135",
                                        "grid-md-true": "MuiGrid-grid-md-true-136",
                                        "grid-sm-1": "MuiGrid-grid-sm-1-123",
                                        "grid-sm-10": "MuiGrid-grid-sm-10-132",
                                        "grid-sm-11": "MuiGrid-grid-sm-11-133",
                                        "grid-sm-12": "MuiGrid-grid-sm-12-134",
                                        "grid-sm-2": "MuiGrid-grid-sm-2-124",
                                        "grid-sm-3": "MuiGrid-grid-sm-3-125",
                                        "grid-sm-4": "MuiGrid-grid-sm-4-126",
                                        "grid-sm-5": "MuiGrid-grid-sm-5-127",
                                        "grid-sm-6": "MuiGrid-grid-sm-6-128",
                                        "grid-sm-7": "MuiGrid-grid-sm-7-129",
                                        "grid-sm-8": "MuiGrid-grid-sm-8-130",
                                        "grid-sm-9": "MuiGrid-grid-sm-9-131",
                                        "grid-sm-auto": "MuiGrid-grid-sm-auto-121",
                                        "grid-sm-true": "MuiGrid-grid-sm-true-122",
                                        "grid-xl-1": "MuiGrid-grid-xl-1-165",
                                        "grid-xl-10": "MuiGrid-grid-xl-10-174",
                                        "grid-xl-11": "MuiGrid-grid-xl-11-175",
                                        "grid-xl-12": "MuiGrid-grid-xl-12-176",
                                        "grid-xl-2": "MuiGrid-grid-xl-2-166",
                                        "grid-xl-3": "MuiGrid-grid-xl-3-167",
                                        "grid-xl-4": "MuiGrid-grid-xl-4-168",
                                        "grid-xl-5": "MuiGrid-grid-xl-5-169",
                                        "grid-xl-6": "MuiGrid-grid-xl-6-170",
                                        "grid-xl-7": "MuiGrid-grid-xl-7-171",
                                        "grid-xl-8": "MuiGrid-grid-xl-8-172",
                                        "grid-xl-9": "MuiGrid-grid-xl-9-173",
                                        "grid-xl-auto": "MuiGrid-grid-xl-auto-163",
                                        "grid-xl-true": "MuiGrid-grid-xl-true-164",
                                        "grid-xs-1": "MuiGrid-grid-xs-1-109",
                                        "grid-xs-10": "MuiGrid-grid-xs-10-118",
                                        "grid-xs-11": "MuiGrid-grid-xs-11-119",
                                        "grid-xs-12": "MuiGrid-grid-xs-12-120",
                                        "grid-xs-2": "MuiGrid-grid-xs-2-110",
                                        "grid-xs-3": "MuiGrid-grid-xs-3-111",
                                        "grid-xs-4": "MuiGrid-grid-xs-4-112",
                                        "grid-xs-5": "MuiGrid-grid-xs-5-113",
                                        "grid-xs-6": "MuiGrid-grid-xs-6-114",
                                        "grid-xs-7": "MuiGrid-grid-xs-7-115",
                                        "grid-xs-8": "MuiGrid-grid-xs-8-116",
                                        "grid-xs-9": "MuiGrid-grid-xs-9-117",
                                        "grid-xs-auto": "MuiGrid-grid-xs-auto-107",
                                        "grid-xs-true": "MuiGrid-grid-xs-true-108",
                                        "item": "MuiGrid-item-81",
                                        "justify-xs-center": "MuiGrid-justify-xs-center-97",
                                        "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-98",
                                        "justify-xs-space-around": "MuiGrid-justify-xs-space-around-100",
                                        "justify-xs-space-between": "MuiGrid-justify-xs-space-between-99",
                                        "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-101",
                                        "spacing-xs-16": "MuiGrid-spacing-xs-16-103",
                                        "spacing-xs-24": "MuiGrid-spacing-xs-24-104",
                                        "spacing-xs-32": "MuiGrid-spacing-xs-32-105",
                                        "spacing-xs-40": "MuiGrid-spacing-xs-40-106",
                                        "spacing-xs-8": "MuiGrid-spacing-xs-8-102",
                                        "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-86",
                                        "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-87",
                                        "zeroMinWidth": "MuiGrid-zeroMinWidth-82",
                                      }
                                    }
                                    component="div"
                                    container={true}
                                    direction="row"
                                    item={false}
                                    justify="space-between"
                                    lg={false}
                                    md={false}
                                    sm={false}
                                    spacing={0}
                                    wrap="wrap"
                                    xl={false}
                                    xs={false}
                                    zeroMinWidth={false}
                                  >
                                    <div
                                      className="MuiGrid-container-80 MuiGrid-justify-xs-space-between-99"
                                    >
                                      <WithStyles(Grid)
                                        item={true}
                                      >
                                        <Grid
                                          alignContent="stretch"
                                          alignItems="stretch"
                                          classes={
                                            Object {
                                              "align-content-xs-center": "MuiGrid-align-content-xs-center-92",
                                              "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-94",
                                              "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-93",
                                              "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-96",
                                              "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-95",
                                              "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-91",
                                              "align-items-xs-center": "MuiGrid-align-items-xs-center-88",
                                              "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-90",
                                              "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-89",
                                              "container": "MuiGrid-container-80",
                                              "direction-xs-column": "MuiGrid-direction-xs-column-83",
                                              "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-84",
                                              "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-85",
                                              "grid-lg-1": "MuiGrid-grid-lg-1-151",
                                              "grid-lg-10": "MuiGrid-grid-lg-10-160",
                                              "grid-lg-11": "MuiGrid-grid-lg-11-161",
                                              "grid-lg-12": "MuiGrid-grid-lg-12-162",
                                              "grid-lg-2": "MuiGrid-grid-lg-2-152",
                                              "grid-lg-3": "MuiGrid-grid-lg-3-153",
                                              "grid-lg-4": "MuiGrid-grid-lg-4-154",
                                              "grid-lg-5": "MuiGrid-grid-lg-5-155",
                                              "grid-lg-6": "MuiGrid-grid-lg-6-156",
                                              "grid-lg-7": "MuiGrid-grid-lg-7-157",
                                              "grid-lg-8": "MuiGrid-grid-lg-8-158",
                                              "grid-lg-9": "MuiGrid-grid-lg-9-159",
                                              "grid-lg-auto": "MuiGrid-grid-lg-auto-149",
                                              "grid-lg-true": "MuiGrid-grid-lg-true-150",
                                              "grid-md-1": "MuiGrid-grid-md-1-137",
                                              "grid-md-10": "MuiGrid-grid-md-10-146",
                                              "grid-md-11": "MuiGrid-grid-md-11-147",
                                              "grid-md-12": "MuiGrid-grid-md-12-148",
                                              "grid-md-2": "MuiGrid-grid-md-2-138",
                                              "grid-md-3": "MuiGrid-grid-md-3-139",
                                              "grid-md-4": "MuiGrid-grid-md-4-140",
                                              "grid-md-5": "MuiGrid-grid-md-5-141",
                                              "grid-md-6": "MuiGrid-grid-md-6-142",
                                              "grid-md-7": "MuiGrid-grid-md-7-143",
                                              "grid-md-8": "MuiGrid-grid-md-8-144",
                                              "grid-md-9": "MuiGrid-grid-md-9-145",
                                              "grid-md-auto": "MuiGrid-grid-md-auto-135",
                                              "grid-md-true": "MuiGrid-grid-md-true-136",
                                              "grid-sm-1": "MuiGrid-grid-sm-1-123",
                                              "grid-sm-10": "MuiGrid-grid-sm-10-132",
                                              "grid-sm-11": "MuiGrid-grid-sm-11-133",
                                              "grid-sm-12": "MuiGrid-grid-sm-12-134",
                                              "grid-sm-2": "MuiGrid-grid-sm-2-124",
                                              "grid-sm-3": "MuiGrid-grid-sm-3-125",
                                              "grid-sm-4": "MuiGrid-grid-sm-4-126",
                                              "grid-sm-5": "MuiGrid-grid-sm-5-127",
                                              "grid-sm-6": "MuiGrid-grid-sm-6-128",
                                              "grid-sm-7": "MuiGrid-grid-sm-7-129",
                                              "grid-sm-8": "MuiGrid-grid-sm-8-130",
                                              "grid-sm-9": "MuiGrid-grid-sm-9-131",
                                              "grid-sm-auto": "MuiGrid-grid-sm-auto-121",
                                              "grid-sm-true": "MuiGrid-grid-sm-true-122",
                                              "grid-xl-1": "MuiGrid-grid-xl-1-165",
                                              "grid-xl-10": "MuiGrid-grid-xl-10-174",
                                              "grid-xl-11": "MuiGrid-grid-xl-11-175",
                                              "grid-xl-12": "MuiGrid-grid-xl-12-176",
                                              "grid-xl-2": "MuiGrid-grid-xl-2-166",
                                              "grid-xl-3": "MuiGrid-grid-xl-3-167",
                                              "grid-xl-4": "MuiGrid-grid-xl-4-168",
                                              "grid-xl-5": "MuiGrid-grid-xl-5-169",
                                              "grid-xl-6": "MuiGrid-grid-xl-6-170",
                                              "grid-xl-7": "MuiGrid-grid-xl-7-171",
                                              "grid-xl-8": "MuiGrid-grid-xl-8-172",
                                              "grid-xl-9": "MuiGrid-grid-xl-9-173",
                                              "grid-xl-auto": "MuiGrid-grid-xl-auto-163",
                                              "grid-xl-true": "MuiGrid-grid-xl-true-164",
                                              "grid-xs-1": "MuiGrid-grid-xs-1-109",
                                              "grid-xs-10": "MuiGrid-grid-xs-10-118",
                                              "grid-xs-11": "MuiGrid-grid-xs-11-119",
                                              "grid-xs-12": "MuiGrid-grid-xs-12-120",
                                              "grid-xs-2": "MuiGrid-grid-xs-2-110",
                                              "grid-xs-3": "MuiGrid-grid-xs-3-111",
                                              "grid-xs-4": "MuiGrid-grid-xs-4-112",
                                              "grid-xs-5": "MuiGrid-grid-xs-5-113",
                                              "grid-xs-6": "MuiGrid-grid-xs-6-114",
                                              "grid-xs-7": "MuiGrid-grid-xs-7-115",
                                              "grid-xs-8": "MuiGrid-grid-xs-8-116",
                                              "grid-xs-9": "MuiGrid-grid-xs-9-117",
                                              "grid-xs-auto": "MuiGrid-grid-xs-auto-107",
                                              "grid-xs-true": "MuiGrid-grid-xs-true-108",
                                              "item": "MuiGrid-item-81",
                                              "justify-xs-center": "MuiGrid-justify-xs-center-97",
                                              "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-98",
                                              "justify-xs-space-around": "MuiGrid-justify-xs-space-around-100",
                                              "justify-xs-space-between": "MuiGrid-justify-xs-space-between-99",
                                              "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-101",
                                              "spacing-xs-16": "MuiGrid-spacing-xs-16-103",
                                              "spacing-xs-24": "MuiGrid-spacing-xs-24-104",
                                              "spacing-xs-32": "MuiGrid-spacing-xs-32-105",
                                              "spacing-xs-40": "MuiGrid-spacing-xs-40-106",
                                              "spacing-xs-8": "MuiGrid-spacing-xs-8-102",
                                              "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-86",
                                              "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-87",
                                              "zeroMinWidth": "MuiGrid-zeroMinWidth-82",
                                            }
                                          }
                                          component="div"
                                          container={false}
                                          direction="row"
                                          item={true}
                                          justify="flex-start"
                                          lg={false}
                                          md={false}
                                          sm={false}
                                          spacing={0}
                                          wrap="wrap"
                                          xl={false}
                                          xs={false}
                                          zeroMinWidth={false}
                                        >
                                          <div
                                            className="MuiGrid-item-81"
                                          >
                                            <LinkButton
                                              color="secondary"
                                              to="/back"
                                              variant="contained"
                                            >
                                              <WithStyles(Button)
                                                color="secondary"
                                                component={[Function]}
                                                to="/back"
                                                variant="contained"
                                              >
                                                <Button
                                                  classes={
                                                    Object {
                                                      "colorInherit": "MuiButton-colorInherit-198",
                                                      "contained": "MuiButton-contained-188",
                                                      "containedPrimary": "MuiButton-containedPrimary-189",
                                                      "containedSecondary": "MuiButton-containedSecondary-190",
                                                      "disabled": "MuiButton-disabled-197",
                                                      "extendedFab": "MuiButton-extendedFab-195",
                                                      "fab": "MuiButton-fab-194",
                                                      "flat": "MuiButton-flat-182",
                                                      "flatPrimary": "MuiButton-flatPrimary-183",
                                                      "flatSecondary": "MuiButton-flatSecondary-184",
                                                      "focusVisible": "MuiButton-focusVisible-196",
                                                      "fullWidth": "MuiButton-fullWidth-202",
                                                      "label": "MuiButton-label-178",
                                                      "mini": "MuiButton-mini-199",
                                                      "outlined": "MuiButton-outlined-185",
                                                      "outlinedPrimary": "MuiButton-outlinedPrimary-186",
                                                      "outlinedSecondary": "MuiButton-outlinedSecondary-187",
                                                      "raised": "MuiButton-raised-191",
                                                      "raisedPrimary": "MuiButton-raisedPrimary-192",
                                                      "raisedSecondary": "MuiButton-raisedSecondary-193",
                                                      "root": "MuiButton-root-177",
                                                      "sizeLarge": "MuiButton-sizeLarge-201",
                                                      "sizeSmall": "MuiButton-sizeSmall-200",
                                                      "text": "MuiButton-text-179",
                                                      "textPrimary": "MuiButton-textPrimary-180",
                                                      "textSecondary": "MuiButton-textSecondary-181",
                                                    }
                                                  }
                                                  color="secondary"
                                                  component={[Function]}
                                                  disableFocusRipple={false}
                                                  disabled={false}
                                                  fullWidth={false}
                                                  mini={false}
                                                  size="medium"
                                                  to="/back"
                                                  type="button"
                                                  variant="contained"
                                                >
                                                  <WithStyles(ButtonBase)
                                                    className="MuiButton-root-177 MuiButton-contained-188 MuiButton-containedSecondary-190 MuiButton-raised-191 MuiButton-raisedSecondary-193"
                                                    component={[Function]}
                                                    disabled={false}
                                                    focusRipple={true}
                                                    focusVisibleClassName="MuiButton-focusVisible-196"
                                                    to="/back"
                                                    type="button"
                                                  >
                                                    <ButtonBase
                                                      centerRipple={false}
                                                      className="MuiButton-root-177 MuiButton-contained-188 MuiButton-containedSecondary-190 MuiButton-raised-191 MuiButton-raisedSecondary-193"
                                                      classes={
                                                        Object {
                                                          "disabled": "MuiButtonBase-disabled-204",
                                                          "focusVisible": "MuiButtonBase-focusVisible-205",
                                                          "root": "MuiButtonBase-root-203",
                                                        }
                                                      }
                                                      component={[Function]}
                                                      disableRipple={false}
                                                      disableTouchRipple={false}
                                                      disabled={false}
                                                      focusRipple={true}
                                                      focusVisibleClassName="MuiButton-focusVisible-196"
                                                      tabIndex="0"
                                                      to="/back"
                                                      type="button"
                                                    >
                                                      <Link
                                                        className="MuiButtonBase-root-203 MuiButton-root-177 MuiButton-contained-188 MuiButton-containedSecondary-190 MuiButton-raised-191 MuiButton-raisedSecondary-193"
                                                        onBlur={[Function]}
                                                        onContextMenu={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        role="button"
                                                        tabIndex="0"
                                                        to="/back"
                                                      >
                                                        <a
                                                          className="MuiButtonBase-root-203 MuiButton-root-177 MuiButton-contained-188 MuiButton-containedSecondary-190 MuiButton-raised-191 MuiButton-raisedSecondary-193"
                                                          href=""
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onContextMenu={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          onMouseDown={[Function]}
                                                          onMouseLeave={[Function]}
                                                          onMouseUp={[Function]}
                                                          onTouchEnd={[Function]}
                                                          onTouchMove={[Function]}
                                                          onTouchStart={[Function]}
                                                          role="button"
                                                          tabIndex="0"
                                                        >
                                                          <span
                                                            className="MuiButton-label-178"
                                                          >
                                                            Cancel
                                                          </span>
                                                          <NoSsr
                                                            defer={false}
                                                            fallback={null}
                                                          >
                                                            <WithStyles(TouchRipple)
                                                              center={false}
                                                              innerRef={[Function]}
                                                            >
                                                              <TouchRipple
                                                                center={false}
                                                                classes={
                                                                  Object {
                                                                    "child": "MuiTouchRipple-child-210",
                                                                    "childLeaving": "MuiTouchRipple-childLeaving-211",
                                                                    "childPulsate": "MuiTouchRipple-childPulsate-212",
                                                                    "ripple": "MuiTouchRipple-ripple-207",
                                                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate-209",
                                                                    "rippleVisible": "MuiTouchRipple-rippleVisible-208",
                                                                    "root": "MuiTouchRipple-root-206",
                                                                  }
                                                                }
                                                              >
                                                                <TransitionGroup
                                                                  childFactory={[Function]}
                                                                  className="MuiTouchRipple-root-206"
                                                                  component="span"
                                                                  enter={true}
                                                                  exit={true}
                                                                >
                                                                  <span
                                                                    className="MuiTouchRipple-root-206"
                                                                  />
                                                                </TransitionGroup>
                                                              </TouchRipple>
                                                            </WithStyles(TouchRipple)>
                                                          </NoSsr>
                                                        </a>
                                                      </Link>
                                                    </ButtonBase>
                                                  </WithStyles(ButtonBase)>
                                                </Button>
                                              </WithStyles(Button)>
                                            </LinkButton>
                                          </div>
                                        </Grid>
                                      </WithStyles(Grid)>
                                      <WithStyles(Grid)
                                        item={true}
                                      >
                                        <Grid
                                          alignContent="stretch"
                                          alignItems="stretch"
                                          classes={
                                            Object {
                                              "align-content-xs-center": "MuiGrid-align-content-xs-center-92",
                                              "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-94",
                                              "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-93",
                                              "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-96",
                                              "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-95",
                                              "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-91",
                                              "align-items-xs-center": "MuiGrid-align-items-xs-center-88",
                                              "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-90",
                                              "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-89",
                                              "container": "MuiGrid-container-80",
                                              "direction-xs-column": "MuiGrid-direction-xs-column-83",
                                              "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-84",
                                              "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-85",
                                              "grid-lg-1": "MuiGrid-grid-lg-1-151",
                                              "grid-lg-10": "MuiGrid-grid-lg-10-160",
                                              "grid-lg-11": "MuiGrid-grid-lg-11-161",
                                              "grid-lg-12": "MuiGrid-grid-lg-12-162",
                                              "grid-lg-2": "MuiGrid-grid-lg-2-152",
                                              "grid-lg-3": "MuiGrid-grid-lg-3-153",
                                              "grid-lg-4": "MuiGrid-grid-lg-4-154",
                                              "grid-lg-5": "MuiGrid-grid-lg-5-155",
                                              "grid-lg-6": "MuiGrid-grid-lg-6-156",
                                              "grid-lg-7": "MuiGrid-grid-lg-7-157",
                                              "grid-lg-8": "MuiGrid-grid-lg-8-158",
                                              "grid-lg-9": "MuiGrid-grid-lg-9-159",
                                              "grid-lg-auto": "MuiGrid-grid-lg-auto-149",
                                              "grid-lg-true": "MuiGrid-grid-lg-true-150",
                                              "grid-md-1": "MuiGrid-grid-md-1-137",
                                              "grid-md-10": "MuiGrid-grid-md-10-146",
                                              "grid-md-11": "MuiGrid-grid-md-11-147",
                                              "grid-md-12": "MuiGrid-grid-md-12-148",
                                              "grid-md-2": "MuiGrid-grid-md-2-138",
                                              "grid-md-3": "MuiGrid-grid-md-3-139",
                                              "grid-md-4": "MuiGrid-grid-md-4-140",
                                              "grid-md-5": "MuiGrid-grid-md-5-141",
                                              "grid-md-6": "MuiGrid-grid-md-6-142",
                                              "grid-md-7": "MuiGrid-grid-md-7-143",
                                              "grid-md-8": "MuiGrid-grid-md-8-144",
                                              "grid-md-9": "MuiGrid-grid-md-9-145",
                                              "grid-md-auto": "MuiGrid-grid-md-auto-135",
                                              "grid-md-true": "MuiGrid-grid-md-true-136",
                                              "grid-sm-1": "MuiGrid-grid-sm-1-123",
                                              "grid-sm-10": "MuiGrid-grid-sm-10-132",
                                              "grid-sm-11": "MuiGrid-grid-sm-11-133",
                                              "grid-sm-12": "MuiGrid-grid-sm-12-134",
                                              "grid-sm-2": "MuiGrid-grid-sm-2-124",
                                              "grid-sm-3": "MuiGrid-grid-sm-3-125",
                                              "grid-sm-4": "MuiGrid-grid-sm-4-126",
                                              "grid-sm-5": "MuiGrid-grid-sm-5-127",
                                              "grid-sm-6": "MuiGrid-grid-sm-6-128",
                                              "grid-sm-7": "MuiGrid-grid-sm-7-129",
                                              "grid-sm-8": "MuiGrid-grid-sm-8-130",
                                              "grid-sm-9": "MuiGrid-grid-sm-9-131",
                                              "grid-sm-auto": "MuiGrid-grid-sm-auto-121",
                                              "grid-sm-true": "MuiGrid-grid-sm-true-122",
                                              "grid-xl-1": "MuiGrid-grid-xl-1-165",
                                              "grid-xl-10": "MuiGrid-grid-xl-10-174",
                                              "grid-xl-11": "MuiGrid-grid-xl-11-175",
                                              "grid-xl-12": "MuiGrid-grid-xl-12-176",
                                              "grid-xl-2": "MuiGrid-grid-xl-2-166",
                                              "grid-xl-3": "MuiGrid-grid-xl-3-167",
                                              "grid-xl-4": "MuiGrid-grid-xl-4-168",
                                              "grid-xl-5": "MuiGrid-grid-xl-5-169",
                                              "grid-xl-6": "MuiGrid-grid-xl-6-170",
                                              "grid-xl-7": "MuiGrid-grid-xl-7-171",
                                              "grid-xl-8": "MuiGrid-grid-xl-8-172",
                                              "grid-xl-9": "MuiGrid-grid-xl-9-173",
                                              "grid-xl-auto": "MuiGrid-grid-xl-auto-163",
                                              "grid-xl-true": "MuiGrid-grid-xl-true-164",
                                              "grid-xs-1": "MuiGrid-grid-xs-1-109",
                                              "grid-xs-10": "MuiGrid-grid-xs-10-118",
                                              "grid-xs-11": "MuiGrid-grid-xs-11-119",
                                              "grid-xs-12": "MuiGrid-grid-xs-12-120",
                                              "grid-xs-2": "MuiGrid-grid-xs-2-110",
                                              "grid-xs-3": "MuiGrid-grid-xs-3-111",
                                              "grid-xs-4": "MuiGrid-grid-xs-4-112",
                                              "grid-xs-5": "MuiGrid-grid-xs-5-113",
                                              "grid-xs-6": "MuiGrid-grid-xs-6-114",
                                              "grid-xs-7": "MuiGrid-grid-xs-7-115",
                                              "grid-xs-8": "MuiGrid-grid-xs-8-116",
                                              "grid-xs-9": "MuiGrid-grid-xs-9-117",
                                              "grid-xs-auto": "MuiGrid-grid-xs-auto-107",
                                              "grid-xs-true": "MuiGrid-grid-xs-true-108",
                                              "item": "MuiGrid-item-81",
                                              "justify-xs-center": "MuiGrid-justify-xs-center-97",
                                              "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-98",
                                              "justify-xs-space-around": "MuiGrid-justify-xs-space-around-100",
                                              "justify-xs-space-between": "MuiGrid-justify-xs-space-between-99",
                                              "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-101",
                                              "spacing-xs-16": "MuiGrid-spacing-xs-16-103",
                                              "spacing-xs-24": "MuiGrid-spacing-xs-24-104",
                                              "spacing-xs-32": "MuiGrid-spacing-xs-32-105",
                                              "spacing-xs-40": "MuiGrid-spacing-xs-40-106",
                                              "spacing-xs-8": "MuiGrid-spacing-xs-8-102",
                                              "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-86",
                                              "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-87",
                                              "zeroMinWidth": "MuiGrid-zeroMinWidth-82",
                                            }
                                          }
                                          component="div"
                                          container={false}
                                          direction="row"
                                          item={true}
                                          justify="flex-start"
                                          lg={false}
                                          md={false}
                                          sm={false}
                                          spacing={0}
                                          wrap="wrap"
                                          xl={false}
                                          xs={false}
                                          zeroMinWidth={false}
                                        >
                                          <div
                                            className="MuiGrid-item-81"
                                          >
                                            <WithStyles(Button)
                                              color="primary"
                                              disabled={true}
                                              type="submit"
                                              variant="contained"
                                            >
                                              <Button
                                                classes={
                                                  Object {
                                                    "colorInherit": "MuiButton-colorInherit-198",
                                                    "contained": "MuiButton-contained-188",
                                                    "containedPrimary": "MuiButton-containedPrimary-189",
                                                    "containedSecondary": "MuiButton-containedSecondary-190",
                                                    "disabled": "MuiButton-disabled-197",
                                                    "extendedFab": "MuiButton-extendedFab-195",
                                                    "fab": "MuiButton-fab-194",
                                                    "flat": "MuiButton-flat-182",
                                                    "flatPrimary": "MuiButton-flatPrimary-183",
                                                    "flatSecondary": "MuiButton-flatSecondary-184",
                                                    "focusVisible": "MuiButton-focusVisible-196",
                                                    "fullWidth": "MuiButton-fullWidth-202",
                                                    "label": "MuiButton-label-178",
                                                    "mini": "MuiButton-mini-199",
                                                    "outlined": "MuiButton-outlined-185",
                                                    "outlinedPrimary": "MuiButton-outlinedPrimary-186",
                                                    "outlinedSecondary": "MuiButton-outlinedSecondary-187",
                                                    "raised": "MuiButton-raised-191",
                                                    "raisedPrimary": "MuiButton-raisedPrimary-192",
                                                    "raisedSecondary": "MuiButton-raisedSecondary-193",
                                                    "root": "MuiButton-root-177",
                                                    "sizeLarge": "MuiButton-sizeLarge-201",
                                                    "sizeSmall": "MuiButton-sizeSmall-200",
                                                    "text": "MuiButton-text-179",
                                                    "textPrimary": "MuiButton-textPrimary-180",
                                                    "textSecondary": "MuiButton-textSecondary-181",
                                                  }
                                                }
                                                color="primary"
                                                component="button"
                                                disableFocusRipple={false}
                                                disabled={true}
                                                fullWidth={false}
                                                mini={false}
                                                size="medium"
                                                type="submit"
                                                variant="contained"
                                              >
                                                <WithStyles(ButtonBase)
                                                  className="MuiButton-root-177 MuiButton-contained-188 MuiButton-containedPrimary-189 MuiButton-raised-191 MuiButton-raisedPrimary-192 MuiButton-disabled-197"
                                                  component="button"
                                                  disabled={true}
                                                  focusRipple={true}
                                                  focusVisibleClassName="MuiButton-focusVisible-196"
                                                  type="submit"
                                                >
                                                  <ButtonBase
                                                    centerRipple={false}
                                                    className="MuiButton-root-177 MuiButton-contained-188 MuiButton-containedPrimary-189 MuiButton-raised-191 MuiButton-raisedPrimary-192 MuiButton-disabled-197"
                                                    classes={
                                                      Object {
                                                        "disabled": "MuiButtonBase-disabled-204",
                                                        "focusVisible": "MuiButtonBase-focusVisible-205",
                                                        "root": "MuiButtonBase-root-203",
                                                      }
                                                    }
                                                    component="button"
                                                    disableRipple={false}
                                                    disableTouchRipple={false}
                                                    disabled={true}
                                                    focusRipple={true}
                                                    focusVisibleClassName="MuiButton-focusVisible-196"
                                                    tabIndex="0"
                                                    type="submit"
                                                  >
                                                    <button
                                                      className="MuiButtonBase-root-203 MuiButtonBase-disabled-204 MuiButton-root-177 MuiButton-contained-188 MuiButton-containedPrimary-189 MuiButton-raised-191 MuiButton-raisedPrimary-192 MuiButton-disabled-197"
                                                      disabled={true}
                                                      onBlur={[Function]}
                                                      onContextMenu={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      onMouseDown={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                      onTouchEnd={[Function]}
                                                      onTouchMove={[Function]}
                                                      onTouchStart={[Function]}
                                                      tabIndex="-1"
                                                      type="submit"
                                                    >
                                                      <span
                                                        className="MuiButton-label-178"
                                                      >
                                                        Save
                                                      </span>
                                                    </button>
                                                  </ButtonBase>
                                                </WithStyles(ButtonBase)>
                                              </Button>
                                            </WithStyles(Button)>
                                          </div>
                                        </Grid>
                                      </WithStyles(Grid)>
                                    </div>
                                  </Grid>
                                </WithStyles(Grid)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </FormButtonBar>
                      </form>
                    </Component>
                  </Form>
                </Formik>
              </div>
            </Paper>
          </WithStyles(Paper)>
        </StyledComponent>
      </Styled(WithStyles(Paper))>
    </Form>
  </Router>
</MemoryRouter>
`;

exports[`Form without cancel link should render component 1`] = `
.c1 {
  margin-top: 24px;
}

.c0 {
  padding: 24px;
}

<Form
  initialValues={
    Object {
      "name": "Test",
    }
  }
  onSubmit={[MockFunction]}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "name",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "name": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "required": true,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
>
  <Styled(WithStyles(Paper))>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "Naked": [Function],
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  padding: 24px;
",
            ],
          },
          "displayName": "Styled(WithStyles(Paper))",
          "foldedComponentIds": Array [],
          "options": Object {
            "defaultTheme": Object {
              "breakpoints": Object {
                "between": [Function],
                "down": [Function],
                "keys": Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ],
                "only": [Function],
                "up": [Function],
                "values": Object {
                  "lg": 1280,
                  "md": 960,
                  "sm": 600,
                  "xl": 1920,
                  "xs": 0,
                },
                "width": [Function],
              },
              "direction": "ltr",
              "mixins": Object {
                "gutters": [Function],
                "toolbar": Object {
                  "@media (min-width:0px) and (orientation: landscape)": Object {
                    "minHeight": 48,
                  },
                  "@media (min-width:600px)": Object {
                    "minHeight": 64,
                  },
                  "minHeight": 56,
                },
              },
              "overrides": Object {},
              "palette": Object {
                "action": Object {
                  "active": "rgba(0, 0, 0, 0.54)",
                  "disabled": "rgba(0, 0, 0, 0.26)",
                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                  "hover": "rgba(0, 0, 0, 0.08)",
                  "hoverOpacity": 0.08,
                  "selected": "rgba(0, 0, 0, 0.14)",
                },
                "augmentColor": [Function],
                "background": Object {
                  "default": "#fafafa",
                  "paper": "#fff",
                },
                "common": Object {
                  "black": "#000",
                  "white": "#fff",
                },
                "contrastThreshold": 3,
                "divider": "rgba(0, 0, 0, 0.12)",
                "error": Object {
                  "contrastText": "#fff",
                  "dark": "#d32f2f",
                  "light": "#e57373",
                  "main": "#f44336",
                },
                "getContrastText": [Function],
                "grey": Object {
                  "100": "#f5f5f5",
                  "200": "#eeeeee",
                  "300": "#e0e0e0",
                  "400": "#bdbdbd",
                  "50": "#fafafa",
                  "500": "#9e9e9e",
                  "600": "#757575",
                  "700": "#616161",
                  "800": "#424242",
                  "900": "#212121",
                  "A100": "#d5d5d5",
                  "A200": "#aaaaaa",
                  "A400": "#303030",
                  "A700": "#616161",
                },
                "primary": Object {
                  "contrastText": "#fff",
                  "dark": "#303f9f",
                  "light": "#7986cb",
                  "main": "#3f51b5",
                },
                "secondary": Object {
                  "contrastText": "#fff",
                  "dark": "#c51162",
                  "light": "#ff4081",
                  "main": "#f50057",
                },
                "text": Object {
                  "disabled": "rgba(0, 0, 0, 0.38)",
                  "hint": "rgba(0, 0, 0, 0.38)",
                  "primary": "rgba(0, 0, 0, 0.87)",
                  "secondary": "rgba(0, 0, 0, 0.54)",
                },
                "tonalOffset": 0.2,
                "type": "light",
              },
              "props": Object {},
              "shadows": Array [
                "none",
                "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
              ],
              "shape": Object {
                "borderRadius": 4,
              },
              "spacing": Object {
                "unit": 8,
              },
              "transitions": Object {
                "create": [Function],
                "duration": Object {
                  "complex": 375,
                  "enteringScreen": 225,
                  "leavingScreen": 195,
                  "short": 250,
                  "shorter": 200,
                  "shortest": 150,
                  "standard": 300,
                },
                "easing": Object {
                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                },
                "getAutoHeightDuration": [Function],
              },
              "typography": Object {
                "body1": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 400,
                  "lineHeight": "1.46429em",
                },
                "body1Next": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.00938em",
                  "lineHeight": 1.5,
                },
                "body2": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "lineHeight": "1.71429em",
                },
                "body2Next": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.01071em",
                  "lineHeight": 1.5,
                },
                "button": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "textTransform": "uppercase",
                },
                "buttonNext": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "letterSpacing": "0.02857em",
                  "lineHeight": 1.75,
                  "textTransform": "uppercase",
                },
                "caption": Object {
                  "color": "rgba(0, 0, 0, 0.54)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "lineHeight": "1.375em",
                },
                "captionNext": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.03333em",
                  "lineHeight": 1.66,
                },
                "display1": Object {
                  "color": "rgba(0, 0, 0, 0.54)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "2.125rem",
                  "fontWeight": 400,
                  "lineHeight": "1.20588em",
                },
                "display2": Object {
                  "color": "rgba(0, 0, 0, 0.54)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "2.8125rem",
                  "fontWeight": 400,
                  "lineHeight": "1.13333em",
                  "marginLeft": "-.02em",
                },
                "display3": Object {
                  "color": "rgba(0, 0, 0, 0.54)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "3.5rem",
                  "fontWeight": 400,
                  "letterSpacing": "-.02em",
                  "lineHeight": "1.30357em",
                  "marginLeft": "-.02em",
                },
                "display4": Object {
                  "color": "rgba(0, 0, 0, 0.54)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "7rem",
                  "fontWeight": 300,
                  "letterSpacing": "-.04em",
                  "lineHeight": "1.14286em",
                  "marginLeft": "-.04em",
                },
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": 14,
                "fontWeightLight": 300,
                "fontWeightMedium": 500,
                "fontWeightRegular": 400,
                "h1": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "6rem",
                  "fontWeight": 300,
                  "letterSpacing": "-0.01562em",
                  "lineHeight": 1,
                },
                "h2": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "3.75rem",
                  "fontWeight": 300,
                  "letterSpacing": "-0.00833em",
                  "lineHeight": 1,
                },
                "h3": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "3rem",
                  "fontWeight": 400,
                  "letterSpacing": "0em",
                  "lineHeight": 1.04,
                },
                "h4": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "2.125rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.00735em",
                  "lineHeight": 1.17,
                },
                "h5": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1.5rem",
                  "fontWeight": 400,
                  "letterSpacing": "0em",
                  "lineHeight": 1.33,
                },
                "h6": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1.25rem",
                  "fontWeight": 500,
                  "letterSpacing": "0.0075em",
                  "lineHeight": 1.6,
                },
                "headline": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1.5rem",
                  "fontWeight": 400,
                  "lineHeight": "1.35417em",
                },
                "overline": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.08333em",
                  "lineHeight": 2.66,
                  "textTransform": "uppercase",
                },
                "pxToRem": [Function],
                "round": [Function],
                "subheading": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "lineHeight": "1.5em",
                },
                "subtitle1": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.00938em",
                  "lineHeight": 1.75,
                },
                "subtitle2": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "letterSpacing": "0.00714em",
                  "lineHeight": 1.57,
                },
                "title": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1.3125rem",
                  "fontWeight": 500,
                  "lineHeight": "1.16667em",
                },
                "useNextVariants": false,
              },
              "zIndex": Object {
                "appBar": 1100,
                "drawer": 1200,
                "mobileStepper": 1000,
                "modal": 1300,
                "snackbar": 1400,
                "tooltip": 1500,
              },
            },
            "name": "MuiPaper",
          },
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <WithStyles(Paper)
        className="c0"
      >
        <Paper
          className="c0"
          classes={
            Object {
              "elevation0": "MuiPaper-elevation0-3",
              "elevation1": "MuiPaper-elevation1-4",
              "elevation10": "MuiPaper-elevation10-13",
              "elevation11": "MuiPaper-elevation11-14",
              "elevation12": "MuiPaper-elevation12-15",
              "elevation13": "MuiPaper-elevation13-16",
              "elevation14": "MuiPaper-elevation14-17",
              "elevation15": "MuiPaper-elevation15-18",
              "elevation16": "MuiPaper-elevation16-19",
              "elevation17": "MuiPaper-elevation17-20",
              "elevation18": "MuiPaper-elevation18-21",
              "elevation19": "MuiPaper-elevation19-22",
              "elevation2": "MuiPaper-elevation2-5",
              "elevation20": "MuiPaper-elevation20-23",
              "elevation21": "MuiPaper-elevation21-24",
              "elevation22": "MuiPaper-elevation22-25",
              "elevation23": "MuiPaper-elevation23-26",
              "elevation24": "MuiPaper-elevation24-27",
              "elevation3": "MuiPaper-elevation3-6",
              "elevation4": "MuiPaper-elevation4-7",
              "elevation5": "MuiPaper-elevation5-8",
              "elevation6": "MuiPaper-elevation6-9",
              "elevation7": "MuiPaper-elevation7-10",
              "elevation8": "MuiPaper-elevation8-11",
              "elevation9": "MuiPaper-elevation9-12",
              "root": "MuiPaper-root-1",
              "rounded": "MuiPaper-rounded-2",
            }
          }
          component="div"
          elevation={2}
          square={false}
        >
          <div
            className="MuiPaper-root-1 MuiPaper-elevation2-5 MuiPaper-rounded-2 c0"
          >
            <Formik
              enableReinitialize={false}
              initialValues={
                Object {
                  "name": "Test",
                }
              }
              isInitialValid={false}
              onSubmit={[MockFunction]}
              validateOnBlur={true}
              validateOnChange={true}
              validationSchema={
                ObjectSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_defaultDefault": [Function],
                  "_deps": Array [],
                  "_excludedEdges": Array [],
                  "_exclusive": Object {},
                  "_mutate": undefined,
                  "_nodes": Array [
                    "name",
                  ],
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "object",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "fields": Object {
                    "name": StringSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_deps": Array [],
                      "_exclusive": Object {
                        "required": true,
                      },
                      "_mutate": undefined,
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "string",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "tests": Array [
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                    },
                  },
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                }
              }
            >
              <Form
                autoComplete="off"
              >
                <Component
                  autoComplete="off"
                  formik={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialValues": Object {
                        "name": "Test",
                      },
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setError": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validate": undefined,
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "validationSchema": ObjectSchema {
                        "_blacklist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "_conditions": Array [],
                        "_defaultDefault": [Function],
                        "_deps": Array [],
                        "_excludedEdges": Array [],
                        "_exclusive": Object {},
                        "_mutate": undefined,
                        "_nodes": Array [
                          "name",
                        ],
                        "_options": Object {
                          "abortEarly": true,
                          "recursive": true,
                        },
                        "_type": "object",
                        "_typeError": [Function],
                        "_whitelist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "fields": Object {
                          "name": StringSchema {
                            "_blacklist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "_conditions": Array [],
                            "_deps": Array [],
                            "_exclusive": Object {
                              "required": true,
                            },
                            "_mutate": undefined,
                            "_options": Object {
                              "abortEarly": true,
                              "recursive": true,
                            },
                            "_type": "string",
                            "_typeError": [Function],
                            "_whitelist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "tests": Array [
                              [Function],
                            ],
                            "transforms": Array [
                              [Function],
                            ],
                          },
                        },
                        "tests": Array [],
                        "transforms": Array [
                          [Function],
                        ],
                      },
                      "values": Object {
                        "name": "Test",
                      },
                    }
                  }
                >
                  <form
                    autoComplete="off"
                    onReset={[Function]}
                    onSubmit={[Function]}
                  >
                    <FormikTextField
                      fullWidth={true}
                      label="Name"
                      margin="normal"
                      name="name"
                    >
                      <FormikConnect(FieldInner)
                        component={[Function]}
                        fullWidth={true}
                        label="Name"
                        margin="normal"
                        name="name"
                      >
                        <FieldInner
                          component={[Function]}
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "name": "Test",
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "status": undefined,
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": ObjectSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_defaultDefault": [Function],
                                "_deps": Array [],
                                "_excludedEdges": Array [],
                                "_exclusive": Object {},
                                "_mutate": undefined,
                                "_nodes": Array [
                                  "name",
                                ],
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "object",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "fields": Object {
                                  "name": StringSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {
                                      "required": true,
                                    },
                                    "_mutate": undefined,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "string",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [
                                      [Function],
                                    ],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                },
                                "tests": Array [],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "values": Object {
                                "name": "Test",
                              },
                            }
                          }
                          fullWidth={true}
                          label="Name"
                          margin="normal"
                          name="name"
                        >
                          <TextField
                            field={
                              Object {
                                "name": "name",
                                "onBlur": [Function],
                                "onChange": [Function],
                                "value": "Test",
                              }
                            }
                            form={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "name": "Test",
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "status": undefined,
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "values": Object {
                                  "name": "Test",
                                },
                              }
                            }
                            fullWidth={true}
                            label="Name"
                            margin="normal"
                          >
                            <TextField
                              error={false}
                              fullWidth={true}
                              label="Name"
                              margin="normal"
                              name="name"
                              onBlur={[Function]}
                              onChange={[Function]}
                              required={false}
                              select={false}
                              value="Test"
                              variant="standard"
                            >
                              <WithStyles(FormControl)
                                error={false}
                                fullWidth={true}
                                margin="normal"
                                required={false}
                                variant="standard"
                              >
                                <FormControl
                                  classes={
                                    Object {
                                      "fullWidth": "MuiFormControl-fullWidth-31",
                                      "marginDense": "MuiFormControl-marginDense-30",
                                      "marginNormal": "MuiFormControl-marginNormal-29",
                                      "root": "MuiFormControl-root-28",
                                    }
                                  }
                                  component="div"
                                  disabled={false}
                                  error={false}
                                  fullWidth={true}
                                  margin="normal"
                                  required={false}
                                  variant="standard"
                                >
                                  <div
                                    className="MuiFormControl-root-28 MuiFormControl-marginNormal-29 MuiFormControl-fullWidth-31"
                                  >
                                    <WithStyles(WithFormControlContext(InputLabel))>
                                      <WithFormControlContext(InputLabel)
                                        classes={
                                          Object {
                                            "animated": "MuiInputLabel-animated-40",
                                            "disabled": "MuiInputLabel-disabled-34",
                                            "error": "MuiInputLabel-error-35",
                                            "filled": "MuiInputLabel-filled-41",
                                            "focused": "MuiInputLabel-focused-33",
                                            "formControl": "MuiInputLabel-formControl-37",
                                            "marginDense": "MuiInputLabel-marginDense-38",
                                            "outlined": "MuiInputLabel-outlined-42",
                                            "required": "MuiInputLabel-required-36",
                                            "root": "MuiInputLabel-root-32",
                                            "shrink": "MuiInputLabel-shrink-39",
                                          }
                                        }
                                      >
                                        <InputLabel
                                          classes={
                                            Object {
                                              "animated": "MuiInputLabel-animated-40",
                                              "disabled": "MuiInputLabel-disabled-34",
                                              "error": "MuiInputLabel-error-35",
                                              "filled": "MuiInputLabel-filled-41",
                                              "focused": "MuiInputLabel-focused-33",
                                              "formControl": "MuiInputLabel-formControl-37",
                                              "marginDense": "MuiInputLabel-marginDense-38",
                                              "outlined": "MuiInputLabel-outlined-42",
                                              "required": "MuiInputLabel-required-36",
                                              "root": "MuiInputLabel-root-32",
                                              "shrink": "MuiInputLabel-shrink-39",
                                            }
                                          }
                                          disableAnimation={false}
                                          muiFormControl={
                                            Object {
                                              "adornedStart": false,
                                              "disabled": false,
                                              "error": false,
                                              "filled": true,
                                              "focused": false,
                                              "margin": "normal",
                                              "onBlur": [Function],
                                              "onEmpty": [Function],
                                              "onFilled": [Function],
                                              "onFocus": [Function],
                                              "required": false,
                                              "variant": "standard",
                                            }
                                          }
                                        >
                                          <WithStyles(WithFormControlContext(FormLabel))
                                            className="MuiInputLabel-root-32 MuiInputLabel-formControl-37 MuiInputLabel-animated-40 MuiInputLabel-shrink-39"
                                            classes={
                                              Object {
                                                "disabled": "MuiInputLabel-disabled-34",
                                                "error": "MuiInputLabel-error-35",
                                                "focused": "MuiInputLabel-focused-33",
                                                "required": "MuiInputLabel-required-36",
                                              }
                                            }
                                            data-shrink={true}
                                          >
                                            <WithFormControlContext(FormLabel)
                                              className="MuiInputLabel-root-32 MuiInputLabel-formControl-37 MuiInputLabel-animated-40 MuiInputLabel-shrink-39"
                                              classes={
                                                Object {
                                                  "asterisk": "MuiFormLabel-asterisk-49",
                                                  "disabled": "MuiFormLabel-disabled-45 MuiInputLabel-disabled-34",
                                                  "error": "MuiFormLabel-error-46 MuiInputLabel-error-35",
                                                  "filled": "MuiFormLabel-filled-47",
                                                  "focused": "MuiFormLabel-focused-44 MuiInputLabel-focused-33",
                                                  "required": "MuiFormLabel-required-48 MuiInputLabel-required-36",
                                                  "root": "MuiFormLabel-root-43",
                                                }
                                              }
                                              data-shrink={true}
                                            >
                                              <FormLabel
                                                className="MuiInputLabel-root-32 MuiInputLabel-formControl-37 MuiInputLabel-animated-40 MuiInputLabel-shrink-39"
                                                classes={
                                                  Object {
                                                    "asterisk": "MuiFormLabel-asterisk-49",
                                                    "disabled": "MuiFormLabel-disabled-45 MuiInputLabel-disabled-34",
                                                    "error": "MuiFormLabel-error-46 MuiInputLabel-error-35",
                                                    "filled": "MuiFormLabel-filled-47",
                                                    "focused": "MuiFormLabel-focused-44 MuiInputLabel-focused-33",
                                                    "required": "MuiFormLabel-required-48 MuiInputLabel-required-36",
                                                    "root": "MuiFormLabel-root-43",
                                                  }
                                                }
                                                component="label"
                                                data-shrink={true}
                                                muiFormControl={
                                                  Object {
                                                    "adornedStart": false,
                                                    "disabled": false,
                                                    "error": false,
                                                    "filled": true,
                                                    "focused": false,
                                                    "margin": "normal",
                                                    "onBlur": [Function],
                                                    "onEmpty": [Function],
                                                    "onFilled": [Function],
                                                    "onFocus": [Function],
                                                    "required": false,
                                                    "variant": "standard",
                                                  }
                                                }
                                              >
                                                <label
                                                  className="MuiFormLabel-root-43 MuiFormLabel-filled-47 MuiInputLabel-root-32 MuiInputLabel-formControl-37 MuiInputLabel-animated-40 MuiInputLabel-shrink-39"
                                                  data-shrink={true}
                                                >
                                                  Name
                                                </label>
                                              </FormLabel>
                                            </WithFormControlContext(FormLabel)>
                                          </WithStyles(WithFormControlContext(FormLabel))>
                                        </InputLabel>
                                      </WithFormControlContext(InputLabel)>
                                    </WithStyles(WithFormControlContext(InputLabel))>
                                    <WithStyles(Input)
                                      fullWidth={true}
                                      name="name"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      value="Test"
                                    >
                                      <Input
                                        classes={
                                          Object {
                                            "disabled": "MuiInput-disabled-53",
                                            "error": "MuiInput-error-55",
                                            "focused": "MuiInput-focused-52",
                                            "formControl": "MuiInput-formControl-51",
                                            "fullWidth": "MuiInput-fullWidth-57",
                                            "input": "MuiInput-input-58",
                                            "inputMarginDense": "MuiInput-inputMarginDense-59",
                                            "inputMultiline": "MuiInput-inputMultiline-60",
                                            "inputType": "MuiInput-inputType-61",
                                            "inputTypeSearch": "MuiInput-inputTypeSearch-62",
                                            "multiline": "MuiInput-multiline-56",
                                            "root": "MuiInput-root-50",
                                            "underline": "MuiInput-underline-54",
                                          }
                                        }
                                        fullWidth={true}
                                        name="name"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        value="Test"
                                      >
                                        <WithStyles(WithFormControlContext(InputBase))
                                          classes={
                                            Object {
                                              "disabled": "MuiInput-disabled-53",
                                              "error": "MuiInput-error-55",
                                              "focused": "MuiInput-focused-52",
                                              "formControl": "MuiInput-formControl-51",
                                              "fullWidth": "MuiInput-fullWidth-57",
                                              "input": "MuiInput-input-58",
                                              "inputMarginDense": "MuiInput-inputMarginDense-59",
                                              "inputMultiline": "MuiInput-inputMultiline-60",
                                              "inputType": "MuiInput-inputType-61",
                                              "inputTypeSearch": "MuiInput-inputTypeSearch-62",
                                              "multiline": "MuiInput-multiline-56",
                                              "root": "MuiInput-root-50 MuiInput-underline-54",
                                              "underline": null,
                                            }
                                          }
                                          fullWidth={true}
                                          inputComponent="input"
                                          multiline={false}
                                          name="name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="text"
                                          value="Test"
                                        >
                                          <WithFormControlContext(InputBase)
                                            classes={
                                              Object {
                                                "adornedEnd": "MuiInputBase-adornedEnd-68",
                                                "adornedStart": "MuiInputBase-adornedStart-67",
                                                "disabled": "MuiInputBase-disabled-66 MuiInput-disabled-53",
                                                "error": "MuiInputBase-error-69 MuiInput-error-55",
                                                "focused": "MuiInputBase-focused-65 MuiInput-focused-52",
                                                "formControl": "MuiInputBase-formControl-64 MuiInput-formControl-51",
                                                "fullWidth": "MuiInputBase-fullWidth-72 MuiInput-fullWidth-57",
                                                "input": "MuiInputBase-input-73 MuiInput-input-58",
                                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-79",
                                                "inputAdornedStart": "MuiInputBase-inputAdornedStart-78",
                                                "inputMarginDense": "MuiInputBase-inputMarginDense-74 MuiInput-inputMarginDense-59",
                                                "inputMultiline": "MuiInputBase-inputMultiline-75 MuiInput-inputMultiline-60",
                                                "inputType": "MuiInputBase-inputType-76 MuiInput-inputType-61",
                                                "inputTypeSearch": "MuiInputBase-inputTypeSearch-77 MuiInput-inputTypeSearch-62",
                                                "marginDense": "MuiInputBase-marginDense-70",
                                                "multiline": "MuiInputBase-multiline-71 MuiInput-multiline-56",
                                                "root": "MuiInputBase-root-63 MuiInput-root-50 MuiInput-underline-54",
                                              }
                                            }
                                            fullWidth={true}
                                            inputComponent="input"
                                            multiline={false}
                                            name="name"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            type="text"
                                            value="Test"
                                          >
                                            <InputBase
                                              classes={
                                                Object {
                                                  "adornedEnd": "MuiInputBase-adornedEnd-68",
                                                  "adornedStart": "MuiInputBase-adornedStart-67",
                                                  "disabled": "MuiInputBase-disabled-66 MuiInput-disabled-53",
                                                  "error": "MuiInputBase-error-69 MuiInput-error-55",
                                                  "focused": "MuiInputBase-focused-65 MuiInput-focused-52",
                                                  "formControl": "MuiInputBase-formControl-64 MuiInput-formControl-51",
                                                  "fullWidth": "MuiInputBase-fullWidth-72 MuiInput-fullWidth-57",
                                                  "input": "MuiInputBase-input-73 MuiInput-input-58",
                                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-79",
                                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart-78",
                                                  "inputMarginDense": "MuiInputBase-inputMarginDense-74 MuiInput-inputMarginDense-59",
                                                  "inputMultiline": "MuiInputBase-inputMultiline-75 MuiInput-inputMultiline-60",
                                                  "inputType": "MuiInputBase-inputType-76 MuiInput-inputType-61",
                                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch-77 MuiInput-inputTypeSearch-62",
                                                  "marginDense": "MuiInputBase-marginDense-70",
                                                  "multiline": "MuiInputBase-multiline-71 MuiInput-multiline-56",
                                                  "root": "MuiInputBase-root-63 MuiInput-root-50 MuiInput-underline-54",
                                                }
                                              }
                                              fullWidth={true}
                                              inputComponent="input"
                                              muiFormControl={
                                                Object {
                                                  "adornedStart": false,
                                                  "disabled": false,
                                                  "error": false,
                                                  "filled": true,
                                                  "focused": false,
                                                  "margin": "normal",
                                                  "onBlur": [Function],
                                                  "onEmpty": [Function],
                                                  "onFilled": [Function],
                                                  "onFocus": [Function],
                                                  "required": false,
                                                  "variant": "standard",
                                                }
                                              }
                                              multiline={false}
                                              name="name"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              type="text"
                                              value="Test"
                                            >
                                              <div
                                                className="MuiInputBase-root-63 MuiInput-root-50 MuiInput-underline-54 MuiInputBase-fullWidth-72 MuiInput-fullWidth-57 MuiInputBase-formControl-64 MuiInput-formControl-51"
                                                onClick={[Function]}
                                              >
                                                <input
                                                  aria-invalid={false}
                                                  className="MuiInputBase-input-73 MuiInput-input-58"
                                                  disabled={false}
                                                  name="name"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  required={false}
                                                  type="text"
                                                  value="Test"
                                                />
                                              </div>
                                            </InputBase>
                                          </WithFormControlContext(InputBase)>
                                        </WithStyles(WithFormControlContext(InputBase))>
                                      </Input>
                                    </WithStyles(Input)>
                                  </div>
                                </FormControl>
                              </WithStyles(FormControl)>
                            </TextField>
                          </TextField>
                        </FieldInner>
                      </FormikConnect(FieldInner)>
                    </FormikTextField>
                    <FormButtonBar>
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": true,
                                "lastClassName": "c1",
                                "rules": Array [
                                  "
  margin-top: 24px;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c1"
                          >
                            <WithStyles(Grid)
                              container={true}
                              justify="space-between"
                            >
                              <Grid
                                alignContent="stretch"
                                alignItems="stretch"
                                classes={
                                  Object {
                                    "align-content-xs-center": "MuiGrid-align-content-xs-center-92",
                                    "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-94",
                                    "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-93",
                                    "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-96",
                                    "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-95",
                                    "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-91",
                                    "align-items-xs-center": "MuiGrid-align-items-xs-center-88",
                                    "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-90",
                                    "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-89",
                                    "container": "MuiGrid-container-80",
                                    "direction-xs-column": "MuiGrid-direction-xs-column-83",
                                    "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-84",
                                    "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-85",
                                    "grid-lg-1": "MuiGrid-grid-lg-1-151",
                                    "grid-lg-10": "MuiGrid-grid-lg-10-160",
                                    "grid-lg-11": "MuiGrid-grid-lg-11-161",
                                    "grid-lg-12": "MuiGrid-grid-lg-12-162",
                                    "grid-lg-2": "MuiGrid-grid-lg-2-152",
                                    "grid-lg-3": "MuiGrid-grid-lg-3-153",
                                    "grid-lg-4": "MuiGrid-grid-lg-4-154",
                                    "grid-lg-5": "MuiGrid-grid-lg-5-155",
                                    "grid-lg-6": "MuiGrid-grid-lg-6-156",
                                    "grid-lg-7": "MuiGrid-grid-lg-7-157",
                                    "grid-lg-8": "MuiGrid-grid-lg-8-158",
                                    "grid-lg-9": "MuiGrid-grid-lg-9-159",
                                    "grid-lg-auto": "MuiGrid-grid-lg-auto-149",
                                    "grid-lg-true": "MuiGrid-grid-lg-true-150",
                                    "grid-md-1": "MuiGrid-grid-md-1-137",
                                    "grid-md-10": "MuiGrid-grid-md-10-146",
                                    "grid-md-11": "MuiGrid-grid-md-11-147",
                                    "grid-md-12": "MuiGrid-grid-md-12-148",
                                    "grid-md-2": "MuiGrid-grid-md-2-138",
                                    "grid-md-3": "MuiGrid-grid-md-3-139",
                                    "grid-md-4": "MuiGrid-grid-md-4-140",
                                    "grid-md-5": "MuiGrid-grid-md-5-141",
                                    "grid-md-6": "MuiGrid-grid-md-6-142",
                                    "grid-md-7": "MuiGrid-grid-md-7-143",
                                    "grid-md-8": "MuiGrid-grid-md-8-144",
                                    "grid-md-9": "MuiGrid-grid-md-9-145",
                                    "grid-md-auto": "MuiGrid-grid-md-auto-135",
                                    "grid-md-true": "MuiGrid-grid-md-true-136",
                                    "grid-sm-1": "MuiGrid-grid-sm-1-123",
                                    "grid-sm-10": "MuiGrid-grid-sm-10-132",
                                    "grid-sm-11": "MuiGrid-grid-sm-11-133",
                                    "grid-sm-12": "MuiGrid-grid-sm-12-134",
                                    "grid-sm-2": "MuiGrid-grid-sm-2-124",
                                    "grid-sm-3": "MuiGrid-grid-sm-3-125",
                                    "grid-sm-4": "MuiGrid-grid-sm-4-126",
                                    "grid-sm-5": "MuiGrid-grid-sm-5-127",
                                    "grid-sm-6": "MuiGrid-grid-sm-6-128",
                                    "grid-sm-7": "MuiGrid-grid-sm-7-129",
                                    "grid-sm-8": "MuiGrid-grid-sm-8-130",
                                    "grid-sm-9": "MuiGrid-grid-sm-9-131",
                                    "grid-sm-auto": "MuiGrid-grid-sm-auto-121",
                                    "grid-sm-true": "MuiGrid-grid-sm-true-122",
                                    "grid-xl-1": "MuiGrid-grid-xl-1-165",
                                    "grid-xl-10": "MuiGrid-grid-xl-10-174",
                                    "grid-xl-11": "MuiGrid-grid-xl-11-175",
                                    "grid-xl-12": "MuiGrid-grid-xl-12-176",
                                    "grid-xl-2": "MuiGrid-grid-xl-2-166",
                                    "grid-xl-3": "MuiGrid-grid-xl-3-167",
                                    "grid-xl-4": "MuiGrid-grid-xl-4-168",
                                    "grid-xl-5": "MuiGrid-grid-xl-5-169",
                                    "grid-xl-6": "MuiGrid-grid-xl-6-170",
                                    "grid-xl-7": "MuiGrid-grid-xl-7-171",
                                    "grid-xl-8": "MuiGrid-grid-xl-8-172",
                                    "grid-xl-9": "MuiGrid-grid-xl-9-173",
                                    "grid-xl-auto": "MuiGrid-grid-xl-auto-163",
                                    "grid-xl-true": "MuiGrid-grid-xl-true-164",
                                    "grid-xs-1": "MuiGrid-grid-xs-1-109",
                                    "grid-xs-10": "MuiGrid-grid-xs-10-118",
                                    "grid-xs-11": "MuiGrid-grid-xs-11-119",
                                    "grid-xs-12": "MuiGrid-grid-xs-12-120",
                                    "grid-xs-2": "MuiGrid-grid-xs-2-110",
                                    "grid-xs-3": "MuiGrid-grid-xs-3-111",
                                    "grid-xs-4": "MuiGrid-grid-xs-4-112",
                                    "grid-xs-5": "MuiGrid-grid-xs-5-113",
                                    "grid-xs-6": "MuiGrid-grid-xs-6-114",
                                    "grid-xs-7": "MuiGrid-grid-xs-7-115",
                                    "grid-xs-8": "MuiGrid-grid-xs-8-116",
                                    "grid-xs-9": "MuiGrid-grid-xs-9-117",
                                    "grid-xs-auto": "MuiGrid-grid-xs-auto-107",
                                    "grid-xs-true": "MuiGrid-grid-xs-true-108",
                                    "item": "MuiGrid-item-81",
                                    "justify-xs-center": "MuiGrid-justify-xs-center-97",
                                    "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-98",
                                    "justify-xs-space-around": "MuiGrid-justify-xs-space-around-100",
                                    "justify-xs-space-between": "MuiGrid-justify-xs-space-between-99",
                                    "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-101",
                                    "spacing-xs-16": "MuiGrid-spacing-xs-16-103",
                                    "spacing-xs-24": "MuiGrid-spacing-xs-24-104",
                                    "spacing-xs-32": "MuiGrid-spacing-xs-32-105",
                                    "spacing-xs-40": "MuiGrid-spacing-xs-40-106",
                                    "spacing-xs-8": "MuiGrid-spacing-xs-8-102",
                                    "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-86",
                                    "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-87",
                                    "zeroMinWidth": "MuiGrid-zeroMinWidth-82",
                                  }
                                }
                                component="div"
                                container={true}
                                direction="row"
                                item={false}
                                justify="space-between"
                                lg={false}
                                md={false}
                                sm={false}
                                spacing={0}
                                wrap="wrap"
                                xl={false}
                                xs={false}
                                zeroMinWidth={false}
                              >
                                <div
                                  className="MuiGrid-container-80 MuiGrid-justify-xs-space-between-99"
                                >
                                  <WithStyles(Grid)
                                    item={true}
                                  >
                                    <Grid
                                      alignContent="stretch"
                                      alignItems="stretch"
                                      classes={
                                        Object {
                                          "align-content-xs-center": "MuiGrid-align-content-xs-center-92",
                                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-94",
                                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-93",
                                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-96",
                                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-95",
                                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-91",
                                          "align-items-xs-center": "MuiGrid-align-items-xs-center-88",
                                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-90",
                                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-89",
                                          "container": "MuiGrid-container-80",
                                          "direction-xs-column": "MuiGrid-direction-xs-column-83",
                                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-84",
                                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-85",
                                          "grid-lg-1": "MuiGrid-grid-lg-1-151",
                                          "grid-lg-10": "MuiGrid-grid-lg-10-160",
                                          "grid-lg-11": "MuiGrid-grid-lg-11-161",
                                          "grid-lg-12": "MuiGrid-grid-lg-12-162",
                                          "grid-lg-2": "MuiGrid-grid-lg-2-152",
                                          "grid-lg-3": "MuiGrid-grid-lg-3-153",
                                          "grid-lg-4": "MuiGrid-grid-lg-4-154",
                                          "grid-lg-5": "MuiGrid-grid-lg-5-155",
                                          "grid-lg-6": "MuiGrid-grid-lg-6-156",
                                          "grid-lg-7": "MuiGrid-grid-lg-7-157",
                                          "grid-lg-8": "MuiGrid-grid-lg-8-158",
                                          "grid-lg-9": "MuiGrid-grid-lg-9-159",
                                          "grid-lg-auto": "MuiGrid-grid-lg-auto-149",
                                          "grid-lg-true": "MuiGrid-grid-lg-true-150",
                                          "grid-md-1": "MuiGrid-grid-md-1-137",
                                          "grid-md-10": "MuiGrid-grid-md-10-146",
                                          "grid-md-11": "MuiGrid-grid-md-11-147",
                                          "grid-md-12": "MuiGrid-grid-md-12-148",
                                          "grid-md-2": "MuiGrid-grid-md-2-138",
                                          "grid-md-3": "MuiGrid-grid-md-3-139",
                                          "grid-md-4": "MuiGrid-grid-md-4-140",
                                          "grid-md-5": "MuiGrid-grid-md-5-141",
                                          "grid-md-6": "MuiGrid-grid-md-6-142",
                                          "grid-md-7": "MuiGrid-grid-md-7-143",
                                          "grid-md-8": "MuiGrid-grid-md-8-144",
                                          "grid-md-9": "MuiGrid-grid-md-9-145",
                                          "grid-md-auto": "MuiGrid-grid-md-auto-135",
                                          "grid-md-true": "MuiGrid-grid-md-true-136",
                                          "grid-sm-1": "MuiGrid-grid-sm-1-123",
                                          "grid-sm-10": "MuiGrid-grid-sm-10-132",
                                          "grid-sm-11": "MuiGrid-grid-sm-11-133",
                                          "grid-sm-12": "MuiGrid-grid-sm-12-134",
                                          "grid-sm-2": "MuiGrid-grid-sm-2-124",
                                          "grid-sm-3": "MuiGrid-grid-sm-3-125",
                                          "grid-sm-4": "MuiGrid-grid-sm-4-126",
                                          "grid-sm-5": "MuiGrid-grid-sm-5-127",
                                          "grid-sm-6": "MuiGrid-grid-sm-6-128",
                                          "grid-sm-7": "MuiGrid-grid-sm-7-129",
                                          "grid-sm-8": "MuiGrid-grid-sm-8-130",
                                          "grid-sm-9": "MuiGrid-grid-sm-9-131",
                                          "grid-sm-auto": "MuiGrid-grid-sm-auto-121",
                                          "grid-sm-true": "MuiGrid-grid-sm-true-122",
                                          "grid-xl-1": "MuiGrid-grid-xl-1-165",
                                          "grid-xl-10": "MuiGrid-grid-xl-10-174",
                                          "grid-xl-11": "MuiGrid-grid-xl-11-175",
                                          "grid-xl-12": "MuiGrid-grid-xl-12-176",
                                          "grid-xl-2": "MuiGrid-grid-xl-2-166",
                                          "grid-xl-3": "MuiGrid-grid-xl-3-167",
                                          "grid-xl-4": "MuiGrid-grid-xl-4-168",
                                          "grid-xl-5": "MuiGrid-grid-xl-5-169",
                                          "grid-xl-6": "MuiGrid-grid-xl-6-170",
                                          "grid-xl-7": "MuiGrid-grid-xl-7-171",
                                          "grid-xl-8": "MuiGrid-grid-xl-8-172",
                                          "grid-xl-9": "MuiGrid-grid-xl-9-173",
                                          "grid-xl-auto": "MuiGrid-grid-xl-auto-163",
                                          "grid-xl-true": "MuiGrid-grid-xl-true-164",
                                          "grid-xs-1": "MuiGrid-grid-xs-1-109",
                                          "grid-xs-10": "MuiGrid-grid-xs-10-118",
                                          "grid-xs-11": "MuiGrid-grid-xs-11-119",
                                          "grid-xs-12": "MuiGrid-grid-xs-12-120",
                                          "grid-xs-2": "MuiGrid-grid-xs-2-110",
                                          "grid-xs-3": "MuiGrid-grid-xs-3-111",
                                          "grid-xs-4": "MuiGrid-grid-xs-4-112",
                                          "grid-xs-5": "MuiGrid-grid-xs-5-113",
                                          "grid-xs-6": "MuiGrid-grid-xs-6-114",
                                          "grid-xs-7": "MuiGrid-grid-xs-7-115",
                                          "grid-xs-8": "MuiGrid-grid-xs-8-116",
                                          "grid-xs-9": "MuiGrid-grid-xs-9-117",
                                          "grid-xs-auto": "MuiGrid-grid-xs-auto-107",
                                          "grid-xs-true": "MuiGrid-grid-xs-true-108",
                                          "item": "MuiGrid-item-81",
                                          "justify-xs-center": "MuiGrid-justify-xs-center-97",
                                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-98",
                                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around-100",
                                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between-99",
                                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-101",
                                          "spacing-xs-16": "MuiGrid-spacing-xs-16-103",
                                          "spacing-xs-24": "MuiGrid-spacing-xs-24-104",
                                          "spacing-xs-32": "MuiGrid-spacing-xs-32-105",
                                          "spacing-xs-40": "MuiGrid-spacing-xs-40-106",
                                          "spacing-xs-8": "MuiGrid-spacing-xs-8-102",
                                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-86",
                                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-87",
                                          "zeroMinWidth": "MuiGrid-zeroMinWidth-82",
                                        }
                                      }
                                      component="div"
                                      container={false}
                                      direction="row"
                                      item={true}
                                      justify="flex-start"
                                      lg={false}
                                      md={false}
                                      sm={false}
                                      spacing={0}
                                      wrap="wrap"
                                      xl={false}
                                      xs={false}
                                      zeroMinWidth={false}
                                    >
                                      <div
                                        className="MuiGrid-item-81"
                                      />
                                    </Grid>
                                  </WithStyles(Grid)>
                                  <WithStyles(Grid)
                                    item={true}
                                  >
                                    <Grid
                                      alignContent="stretch"
                                      alignItems="stretch"
                                      classes={
                                        Object {
                                          "align-content-xs-center": "MuiGrid-align-content-xs-center-92",
                                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-94",
                                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-93",
                                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-96",
                                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-95",
                                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-91",
                                          "align-items-xs-center": "MuiGrid-align-items-xs-center-88",
                                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-90",
                                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-89",
                                          "container": "MuiGrid-container-80",
                                          "direction-xs-column": "MuiGrid-direction-xs-column-83",
                                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-84",
                                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-85",
                                          "grid-lg-1": "MuiGrid-grid-lg-1-151",
                                          "grid-lg-10": "MuiGrid-grid-lg-10-160",
                                          "grid-lg-11": "MuiGrid-grid-lg-11-161",
                                          "grid-lg-12": "MuiGrid-grid-lg-12-162",
                                          "grid-lg-2": "MuiGrid-grid-lg-2-152",
                                          "grid-lg-3": "MuiGrid-grid-lg-3-153",
                                          "grid-lg-4": "MuiGrid-grid-lg-4-154",
                                          "grid-lg-5": "MuiGrid-grid-lg-5-155",
                                          "grid-lg-6": "MuiGrid-grid-lg-6-156",
                                          "grid-lg-7": "MuiGrid-grid-lg-7-157",
                                          "grid-lg-8": "MuiGrid-grid-lg-8-158",
                                          "grid-lg-9": "MuiGrid-grid-lg-9-159",
                                          "grid-lg-auto": "MuiGrid-grid-lg-auto-149",
                                          "grid-lg-true": "MuiGrid-grid-lg-true-150",
                                          "grid-md-1": "MuiGrid-grid-md-1-137",
                                          "grid-md-10": "MuiGrid-grid-md-10-146",
                                          "grid-md-11": "MuiGrid-grid-md-11-147",
                                          "grid-md-12": "MuiGrid-grid-md-12-148",
                                          "grid-md-2": "MuiGrid-grid-md-2-138",
                                          "grid-md-3": "MuiGrid-grid-md-3-139",
                                          "grid-md-4": "MuiGrid-grid-md-4-140",
                                          "grid-md-5": "MuiGrid-grid-md-5-141",
                                          "grid-md-6": "MuiGrid-grid-md-6-142",
                                          "grid-md-7": "MuiGrid-grid-md-7-143",
                                          "grid-md-8": "MuiGrid-grid-md-8-144",
                                          "grid-md-9": "MuiGrid-grid-md-9-145",
                                          "grid-md-auto": "MuiGrid-grid-md-auto-135",
                                          "grid-md-true": "MuiGrid-grid-md-true-136",
                                          "grid-sm-1": "MuiGrid-grid-sm-1-123",
                                          "grid-sm-10": "MuiGrid-grid-sm-10-132",
                                          "grid-sm-11": "MuiGrid-grid-sm-11-133",
                                          "grid-sm-12": "MuiGrid-grid-sm-12-134",
                                          "grid-sm-2": "MuiGrid-grid-sm-2-124",
                                          "grid-sm-3": "MuiGrid-grid-sm-3-125",
                                          "grid-sm-4": "MuiGrid-grid-sm-4-126",
                                          "grid-sm-5": "MuiGrid-grid-sm-5-127",
                                          "grid-sm-6": "MuiGrid-grid-sm-6-128",
                                          "grid-sm-7": "MuiGrid-grid-sm-7-129",
                                          "grid-sm-8": "MuiGrid-grid-sm-8-130",
                                          "grid-sm-9": "MuiGrid-grid-sm-9-131",
                                          "grid-sm-auto": "MuiGrid-grid-sm-auto-121",
                                          "grid-sm-true": "MuiGrid-grid-sm-true-122",
                                          "grid-xl-1": "MuiGrid-grid-xl-1-165",
                                          "grid-xl-10": "MuiGrid-grid-xl-10-174",
                                          "grid-xl-11": "MuiGrid-grid-xl-11-175",
                                          "grid-xl-12": "MuiGrid-grid-xl-12-176",
                                          "grid-xl-2": "MuiGrid-grid-xl-2-166",
                                          "grid-xl-3": "MuiGrid-grid-xl-3-167",
                                          "grid-xl-4": "MuiGrid-grid-xl-4-168",
                                          "grid-xl-5": "MuiGrid-grid-xl-5-169",
                                          "grid-xl-6": "MuiGrid-grid-xl-6-170",
                                          "grid-xl-7": "MuiGrid-grid-xl-7-171",
                                          "grid-xl-8": "MuiGrid-grid-xl-8-172",
                                          "grid-xl-9": "MuiGrid-grid-xl-9-173",
                                          "grid-xl-auto": "MuiGrid-grid-xl-auto-163",
                                          "grid-xl-true": "MuiGrid-grid-xl-true-164",
                                          "grid-xs-1": "MuiGrid-grid-xs-1-109",
                                          "grid-xs-10": "MuiGrid-grid-xs-10-118",
                                          "grid-xs-11": "MuiGrid-grid-xs-11-119",
                                          "grid-xs-12": "MuiGrid-grid-xs-12-120",
                                          "grid-xs-2": "MuiGrid-grid-xs-2-110",
                                          "grid-xs-3": "MuiGrid-grid-xs-3-111",
                                          "grid-xs-4": "MuiGrid-grid-xs-4-112",
                                          "grid-xs-5": "MuiGrid-grid-xs-5-113",
                                          "grid-xs-6": "MuiGrid-grid-xs-6-114",
                                          "grid-xs-7": "MuiGrid-grid-xs-7-115",
                                          "grid-xs-8": "MuiGrid-grid-xs-8-116",
                                          "grid-xs-9": "MuiGrid-grid-xs-9-117",
                                          "grid-xs-auto": "MuiGrid-grid-xs-auto-107",
                                          "grid-xs-true": "MuiGrid-grid-xs-true-108",
                                          "item": "MuiGrid-item-81",
                                          "justify-xs-center": "MuiGrid-justify-xs-center-97",
                                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-98",
                                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around-100",
                                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between-99",
                                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-101",
                                          "spacing-xs-16": "MuiGrid-spacing-xs-16-103",
                                          "spacing-xs-24": "MuiGrid-spacing-xs-24-104",
                                          "spacing-xs-32": "MuiGrid-spacing-xs-32-105",
                                          "spacing-xs-40": "MuiGrid-spacing-xs-40-106",
                                          "spacing-xs-8": "MuiGrid-spacing-xs-8-102",
                                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-86",
                                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-87",
                                          "zeroMinWidth": "MuiGrid-zeroMinWidth-82",
                                        }
                                      }
                                      component="div"
                                      container={false}
                                      direction="row"
                                      item={true}
                                      justify="flex-start"
                                      lg={false}
                                      md={false}
                                      sm={false}
                                      spacing={0}
                                      wrap="wrap"
                                      xl={false}
                                      xs={false}
                                      zeroMinWidth={false}
                                    >
                                      <div
                                        className="MuiGrid-item-81"
                                      >
                                        <WithStyles(Button)
                                          color="primary"
                                          disabled={true}
                                          type="submit"
                                          variant="contained"
                                        >
                                          <Button
                                            classes={
                                              Object {
                                                "colorInherit": "MuiButton-colorInherit-198",
                                                "contained": "MuiButton-contained-188",
                                                "containedPrimary": "MuiButton-containedPrimary-189",
                                                "containedSecondary": "MuiButton-containedSecondary-190",
                                                "disabled": "MuiButton-disabled-197",
                                                "extendedFab": "MuiButton-extendedFab-195",
                                                "fab": "MuiButton-fab-194",
                                                "flat": "MuiButton-flat-182",
                                                "flatPrimary": "MuiButton-flatPrimary-183",
                                                "flatSecondary": "MuiButton-flatSecondary-184",
                                                "focusVisible": "MuiButton-focusVisible-196",
                                                "fullWidth": "MuiButton-fullWidth-202",
                                                "label": "MuiButton-label-178",
                                                "mini": "MuiButton-mini-199",
                                                "outlined": "MuiButton-outlined-185",
                                                "outlinedPrimary": "MuiButton-outlinedPrimary-186",
                                                "outlinedSecondary": "MuiButton-outlinedSecondary-187",
                                                "raised": "MuiButton-raised-191",
                                                "raisedPrimary": "MuiButton-raisedPrimary-192",
                                                "raisedSecondary": "MuiButton-raisedSecondary-193",
                                                "root": "MuiButton-root-177",
                                                "sizeLarge": "MuiButton-sizeLarge-201",
                                                "sizeSmall": "MuiButton-sizeSmall-200",
                                                "text": "MuiButton-text-179",
                                                "textPrimary": "MuiButton-textPrimary-180",
                                                "textSecondary": "MuiButton-textSecondary-181",
                                              }
                                            }
                                            color="primary"
                                            component="button"
                                            disableFocusRipple={false}
                                            disabled={true}
                                            fullWidth={false}
                                            mini={false}
                                            size="medium"
                                            type="submit"
                                            variant="contained"
                                          >
                                            <WithStyles(ButtonBase)
                                              className="MuiButton-root-177 MuiButton-contained-188 MuiButton-containedPrimary-189 MuiButton-raised-191 MuiButton-raisedPrimary-192 MuiButton-disabled-197"
                                              component="button"
                                              disabled={true}
                                              focusRipple={true}
                                              focusVisibleClassName="MuiButton-focusVisible-196"
                                              type="submit"
                                            >
                                              <ButtonBase
                                                centerRipple={false}
                                                className="MuiButton-root-177 MuiButton-contained-188 MuiButton-containedPrimary-189 MuiButton-raised-191 MuiButton-raisedPrimary-192 MuiButton-disabled-197"
                                                classes={
                                                  Object {
                                                    "disabled": "MuiButtonBase-disabled-204",
                                                    "focusVisible": "MuiButtonBase-focusVisible-205",
                                                    "root": "MuiButtonBase-root-203",
                                                  }
                                                }
                                                component="button"
                                                disableRipple={false}
                                                disableTouchRipple={false}
                                                disabled={true}
                                                focusRipple={true}
                                                focusVisibleClassName="MuiButton-focusVisible-196"
                                                tabIndex="0"
                                                type="submit"
                                              >
                                                <button
                                                  className="MuiButtonBase-root-203 MuiButtonBase-disabled-204 MuiButton-root-177 MuiButton-contained-188 MuiButton-containedPrimary-189 MuiButton-raised-191 MuiButton-raisedPrimary-192 MuiButton-disabled-197"
                                                  disabled={true}
                                                  onBlur={[Function]}
                                                  onContextMenu={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  onMouseLeave={[Function]}
                                                  onMouseUp={[Function]}
                                                  onTouchEnd={[Function]}
                                                  onTouchMove={[Function]}
                                                  onTouchStart={[Function]}
                                                  tabIndex="-1"
                                                  type="submit"
                                                >
                                                  <span
                                                    className="MuiButton-label-178"
                                                  >
                                                    Save
                                                  </span>
                                                </button>
                                              </ButtonBase>
                                            </WithStyles(ButtonBase)>
                                          </Button>
                                        </WithStyles(Button)>
                                      </div>
                                    </Grid>
                                  </WithStyles(Grid)>
                                </div>
                              </Grid>
                            </WithStyles(Grid)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </FormButtonBar>
                  </form>
                </Component>
              </Form>
            </Formik>
          </div>
        </Paper>
      </WithStyles(Paper)>
    </StyledComponent>
  </Styled(WithStyles(Paper))>
</Form>
`;
