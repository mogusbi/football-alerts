service:
  name: ${opt:appName, 'football-alerts'}
  publish: false

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'local'}
  environment:
    STAGE: ${self:provider.stage}
    NODE_ENV: ${env:NODE_ENV, 'production'}

package:
  individually: true

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-appsync-plugin
  - serverless-webpack

functions:
  importDeleteCache:
    handler: src/import/deleteCache.handler
    role: ImportDeleteCacheRole
    environment:
      BUCKET: !Ref ArticleImportsBucket

  importGetPublishers:
    handler: src/import/getPublishers.handler
    role: ImportGetPublishersRole
    environment:
      STATE_MACHINE_ARN: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:service}-${opt:stage}-import-articles
      TABLE_NAME: !Ref UsersTable

  importMakeRequest:
    handler: src/import/makeRequest.handler
    role: ImportMakeRequestRole
    environment:
      BUCKET: !Ref ArticleImportsBucket

  usersRegister:
    handler: src/users/register.handler
    role: UsersRegisterRole
    environment:
      TABLE_NAME: !Ref UsersTable

stepFunctions:
  stateMachines:
    importArticles:
      name: ${self:service}-${opt:stage}-import-articles
      definition:
        Comment: Imports articles from RSS feeds
        StartAt: MakeRequest
        States:
          MakeRequest:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-importMakeRequest
#            Next: DeleteCache
#          DeleteCache:
#            Type: Task
#            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-importDeleteCache
            End: true

custom:
  webpack:
    includeModules: true

  appSync:
    -
      name: ${self:service}-${self:provider.stage}-private
      authenticationType: AMAZON_COGNITO_USER_POOLS
      userPoolConfig:
        awsRegion: ${self:provider.region}
        defaultAction: ALLOW
        userPoolId: !Ref CognitoUserPool
      mappingTemplates:
        -
          dataSource: Users
          type: Mutation
          field: createUser
          request: createUser/request.vtl
          response: createUser/response.vtl
        -
          dataSource: Users
          type: Mutation
          field: deleteUser
          request: deleteUser/request.vtl
          response: deleteUser/response.vtl
        -
          dataSource: Users
          type: Query
          field: getUser
          request: getUser/request.vtl
          response: getUser/response.vtl
        -
          dataSource: Users
          type: Query
          field: getUsers
          request: getUsers/request.vtl
          response: getUsers/response.vtl
        -
          dataSource: Users
          type: Mutation
          field: updateUser
          request: updateUser/request.vtl
          response: updateUser/response.vtl
      dataSources:
        -
          type: AMAZON_DYNAMODB
          name: Users
          description: User table
          config:
            tableName: !Ref UsersTable
            serviceRoleArn: !GetAtt DynamoDbServiceRole.Arn

  appsync-offline:
    port: 62222
    dynamodb:
      server:
        port: 8000

  cognito-transformations:
    develop: Develop
    local: Local
    production: Production

resources:
  Resources:
    # Cognito
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        Schema:
          -
            Name: given_name
            AttributeDataType: String
            Mutable: true
            Required: true
          -
            Name: family_name
            AttributeDataType: String
            Mutable: true
            Required: true
          -
            Name: twitter_handle
            AttributeDataType: String
            Mutable: true
            Required: false
          -
            Name: website
            AttributeDataType: String
            Mutable: true
            Required: false
        UsernameAttributes:
          - email
        LambdaConfig:
          PostAuthentication: !GetAtt UsersRegisterLambdaFunction.Arn
          PostConfirmation: !GetAtt UsersRegisterLambdaFunction.Arn

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: FootballAlerts${self:custom.cognito-transformations.${self:provider.stage}}IdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          -
            ClientId: !Ref CognitoUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName

    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoAuthRole.Arn
          unauthenticated: !GetAtt CognitoUnauthRole.Arn

    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-auth-role
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          -
            PolicyName: ${self:service}-${self:provider.stage}-auth-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - mobileanalytics:PutEvents
                    - cognito-sync:*
                    - cognito-identity:*
                  Resource: '*'
                -
                  Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource: '*'

    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-unauth-role
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          -
            PolicyName: ${self:service}-${self:provider.stage}-unauth-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - mobileanalytics:PutEvents
                    - cognito-sync:*
                    - cognito-identity:*
                  Resource: '*'

    # DynamoDb
    ArticlesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-articles
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: link
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          -
            IndexName: link-index
            KeySchema:
              -
                AttributeName: link
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-users
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    DynamoDbServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-dynamodb-service-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          -
            PolicyName: ${self:service}-${self:provider.stage}-dynamodb-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:UpdateItem
                  Resource:
                    - !GetAtt UsersTable.Arn

    # Lambda
    ImportDeleteCacheRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: import-delete-cache-lambda-${self:service}-${self:provider.stage}-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          -
            PolicyName: import-delete-cache-lambda-${self:service}-${self:provider.stage}-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - s3:DeleteObject
                  Resource:
                    - !Join
                      - ''
                      - - !GetAtt ArticleImportsBucket.Arn
                        - '/*'

    ImportGetPublishersRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: import-get-publishers-lambda-${self:service}-${self:provider.stage}-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          -
            PolicyName: import-get-publishers-lambda-${self:service}-${self:provider.stage}-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - dynamodb:Scan
                  Resource:
                    - !GetAtt UsersTable.Arn
                -
                  Effect: Allow
                  Action:
                    - states:StartExecution
                  Resource:
                    - arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:service}-${opt:stage}-import-articles

    ImportMakeRequestRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: import-make-request-lambda-${self:service}-${self:provider.stage}-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          -
            PolicyName: import-make-request-lambda-${self:service}-${self:provider.stage}-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    - !Join
                      - ''
                      - - !GetAtt ArticleImportsBucket.Arn
                        - '/*'

    UsersRegisterRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: users-register-lambda-${self:service}-${self:provider.stage}-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          -
            PolicyName: users-register-lambda-${self:service}-${self:provider.stage}-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource:
                    - !GetAtt UsersTable.Arn

    UsersRegisterLambdaFunctionInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Principal: cognito-idp.amazonaws.com
        FunctionName: !GetAtt UsersRegisterLambdaFunction.Arn
        SourceArn: !GetAtt CognitoUserPool.Arn
        Action: lambda:InvokeFunction

    # S3
    ArticleImportsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-article-imports
