schema {
  query: Query
  mutation: Mutation
}

# Articles
type ArticleImage {
  name: String
  src: String
}

type Article {
  id: ID
  description: String
  image: [ArticleImage]
  link: String
  publishDate: String
  title: String
  user: User
}

type PaginatedArticles {
  articles: [Article]
  nextToken: String
}

# Settings
type SettingsImage {
  height: Int
  name: String
  width: Int
}

type Settings {
  image: [SettingsImage]
}

# Users
type UserSettingsImportImage {
  attribute: String
  property: String
  test: String
  value: String
}

type UserSettingsImport {
  description: String
  feed: String
  image: UserSettingsImportImage
  link: String
  publishDate: String
  title: String
}

type UserSettings {
  import: UserSettingsImport
}

type User {
  id: ID!
  articles: [Article]
  emailAddress: String
  forename: String
  lastUpdated: String
  name: String
  settings: UserSettings
  surname: String
  twitterHandle: String
  website: String
}

type PaginatedUsers {
  users: [User]
  nextToken: String
}

type Query {
  getArticle (id: ID!): Article!
  getArticles (limit: Int, nextToken: String): PaginatedArticles!
  getUser (id: ID!): User!
  getUsers (limit: Int, nextToken: String): PaginatedUsers!
}

input ImportImageInput {
  attribute: String!
  property: String!
  test: String!
  value: String!
}

input ImportInput {
  description: String!
  feed: String!
  image: ImportImageInput!
  link: String!
  publishDate: String!
  title: String!
}

input SettingsInput {
  import: ImportInput
}

input UserInput {
  emailAddress: String
  forename: String
  name: String!
  settings: SettingsInput
  surname: String
  twitterHandle: String
  website: String
}

type Mutation {
  createUser (user: UserInput!): User!
  deleteUser (id: ID!): User!
  updateUser (id: ID!, user: UserInput!): User!
}
